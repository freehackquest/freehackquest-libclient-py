# -*- coding: utf-8 -*-
### This file was automatically generated by fhq-server
### Version: 0.2.15
### Date: 06 Jul 2018

import json
import functools
import websocket
import time
import Queue
import select
from threading import Thread

class FHQCliRecvThread(Thread):
    __ws = None;
    __sendCommandQueue = Queue.Queue();
    __cmd_results = {};
    do_run = True;
    __connecting = False;
    __url = None;
    __messageId = 0;
    
    def __init__(self, url):
        Thread.__init__(self)
        self.__url = url;
    
    def run(self):
        self.__connecting = True
        print('[FHQCliThread] Connecting to ' + self.__url)
        try:
            self.__ws = websocket.create_connection(self.__url)
        except:
            print('Failed connect to ' + self.__url)
            self.__ws = None
            self.__connecting = False
            return
        # self.__ws.setblocking(0)
        self.__connecting = False
        print('[FHQCliThread] Connected');
        while(self.do_run):
            while not self.__sendCommandQueue.empty():
                requestJson = self.__sendCommandQueue.get();
                requestText = json.dumps(requestJson);
                # print('requestText: ' + requestText);
                self.__ws.send(requestText)
            ready = select.select([self.__ws], [], [], 0.1)
            if ready[0]:
                responseText =  self.__ws.recv()
                responseJson = json.loads(responseText)
                cmd_m = responseJson['m'];
                self.__cmd_results[cmd_m] = json.loads(responseText);
                # print(responseText)
            time.sleep(0.5)
        print('[FHQCliThread] Stopping...');
        self.__ws.close()
        self.__ws = None
        print('[FHQCliThread] Stopped');
    
    def addToSendQueue(self, requestJson):
        self.__sendCommandQueue.put(requestJson);
        return requestJson['m'];
    
    def generateBaseCommand(self, cmd):
        self.__messageId = self.__messageId + 1;
        requestJson = {};
        msgId = 'm' + str(self.__messageId);
        requestJson['m'] = msgId;
        requestJson['cmd'] = cmd;
        return requestJson;
    
    def hasCmdResult(self, cmd_m):
        return cmd_m in self.__cmd_results;
    
    def getCmdResult(self, cmd_m):
        return self.__cmd_results[cmd_m]
    
    def removeCmdResult(self, cmd_m):
        self.__cmd_results.pop(cmd_m, None)
    
    def hasConnection(self):
        return self.__connecting or self.__ws != None

class FHQCli:
    # __ws = None;
    __url = 'ws://localhost:1234/';
    __recvThread = None
    def __init__(self, url):
        self.__url = url
        self.connect();
    
    def __enter__(self):
        return self
    
    def __exit__(self, exc_type, exc_value, traceback):
        self.__recvThread.do_run = False;
    
    def close(self):
        self.__recvThread.do_run = False;
    
    def setUrl(self, url):
        self.__url = url;
    
    def getUrl(self):
        return self.__url;
    
    def connect(self):
        self.__recvThread = FHQCliRecvThread(self.__url)
        self.__recvThread.start()
        # self.__recvThread.join()
        # print('FHQCli: Thread started');
        return True;
    
    def __looper(self, cmd_m):
        max_time = 5*10; # 5 seconds
        counter_time = 0;
        cmd_result = {};
        while True:
            counter_time = counter_time + 1;
            if not self.__recvThread.hasConnection():
                return None
            if self.__recvThread.hasCmdResult(cmd_m):
                cmd_result = self.__recvThread.getCmdResult(cmd_m);
                self.__recvThread.removeCmdResult(cmd_m);
                return cmd_result
            if counter_time > max_time:
                cmd_result = None
                break;
            # print('__looper ....')
            time.sleep(0.2)
        return cmd_result;
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # questid - integer, required (quest id)
    # hint - string, required (hint text)
    def addhint(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('addhint')
        if 'questid' in req: 
            requestJson['questid'] = req['questid']
        if 'hint' in req: 
            requestJson['hint'] = req['hint']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # page - integer, required (Number of page)
    # onpage - integer, required (How much rows on page)
    # questid - integer, optional (Filter for questid)
    # userid - integer, optional (Filter for userid)
    def answerlist(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('answerlist')
        if 'page' in req: 
            requestJson['page'] = req['page']
        if 'onpage' in req: 
            requestJson['onpage'] = req['onpage']
        if 'questid' in req: 
            requestJson['questid'] = req['questid']
        if 'userid' in req: 
            requestJson['userid'] = req['userid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # parentid - integer, required (pareintid for classbook article)
    # name - string, required (name of article)
    # content - string, required (content of article)
    # uuid - uuid, optional (uuid of article)
    # ordered - integer, optional (order of article)
    def classbook_add_record(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_add_record')
        if 'parentid' in req: 
            requestJson['parentid'] = req['parentid']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'content' in req: 
            requestJson['content'] = req['content']
        if 'uuid' in req: 
            requestJson['uuid'] = req['uuid']
        if 'ordered' in req: 
            requestJson['ordered'] = req['ordered']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # classbookid - integer, required (id for classbook article)
    def classbook_delete_record(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_delete_record')
        if 'classbookid' in req: 
            requestJson['classbookid'] = req['classbookid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user yes
    # Access admin yes
    # output - string, required (The output file format)
    # lang - string, required (The output file format)
    # zip - boolean, optional (Zipping the output)
    def classbook_export(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_export')
        if 'output' in req: 
            requestJson['output'] = req['output']
        if 'lang' in req: 
            requestJson['lang'] = req['lang']
        if 'zip' in req: 
            requestJson['zip'] = req['zip']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # classbookid - integer, required (id for the classbook article)
    # lang - string, optional (Set lang for the article)
    def classbook_info(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_info')
        if 'classbookid' in req: 
            requestJson['classbookid'] = req['classbookid']
        if 'lang' in req: 
            requestJson['lang'] = req['lang']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # parentid - integer, required (parentid for classbook articles)
    # lang - string, optional (lang for classbook articles)
    # search - string, optional (Search string for classbook articles)
    def classbook_list(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_list')
        if 'parentid' in req: 
            requestJson['parentid'] = req['parentid']
        if 'lang' in req: 
            requestJson['lang'] = req['lang']
        if 'search' in req: 
            requestJson['search'] = req['search']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # classbookid - integer, required (Classbookid for article localization)
    # lang - string, required (Language)
    # name - string, required (Article name)
    # content - string, required (The content of the article)
    def classbook_localization_add_record(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_localization_add_record')
        if 'classbookid' in req: 
            requestJson['classbookid'] = req['classbookid']
        if 'lang' in req: 
            requestJson['lang'] = req['lang']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'content' in req: 
            requestJson['content'] = req['content']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # classbook_localizationid - integer, required (Localization id)
    def classbook_localization_delete_record(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_localization_delete_record')
        if 'classbook_localizationid' in req: 
            requestJson['classbook_localizationid'] = req['classbook_localizationid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # classbook_localizationid - integer, required (Localization id)
    def classbook_localization_info(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_localization_info')
        if 'classbook_localizationid' in req: 
            requestJson['classbook_localizationid'] = req['classbook_localizationid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # classbook_localizationid - integer, required (Localization id)
    # name - string, required (Article name)
    # content - string, required (The content of the article)
    def classbook_localization_update_record(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_localization_update_record')
        if 'classbook_localizationid' in req: 
            requestJson['classbook_localizationid'] = req['classbook_localizationid']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'content' in req: 
            requestJson['content'] = req['content']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # classbook_proposal_id - integer, required (Proposal id)
    def classbook_propasal_prepare_merge_record(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_propasal_prepare_merge_record')
        if 'classbook_proposal_id' in req: 
            requestJson['classbook_proposal_id'] = req['classbook_proposal_id']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user yes
    # Access admin yes
    # classbookid - integer, required (Classbookid for an article)
    # lang - string, required (Language)
    # name - string, required (Article name)
    # content - string, required (The content of the article)
    def classbook_proposal_add_record(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_proposal_add_record')
        if 'classbookid' in req: 
            requestJson['classbookid'] = req['classbookid']
        if 'lang' in req: 
            requestJson['lang'] = req['lang']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'content' in req: 
            requestJson['content'] = req['content']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user yes
    # Access admin yes
    # classbook_proposal_id - integer, required (Proposal id)
    def classbook_proposal_delete_record(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_proposal_delete_record')
        if 'classbook_proposal_id' in req: 
            requestJson['classbook_proposal_id'] = req['classbook_proposal_id']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user yes
    # Access admin yes
    # classbook_proposal_id - integer, required (Proposal id)
    def classbook_proposal_info(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_proposal_info')
        if 'classbook_proposal_id' in req: 
            requestJson['classbook_proposal_id'] = req['classbook_proposal_id']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user yes
    # Access admin yes
    # classbookid - integer, optional (Classbookid for an article)
    # lang - string, optional (Language)
    def classbook_proposal_list(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_proposal_list')
        if 'classbookid' in req: 
            requestJson['classbookid'] = req['classbookid']
        if 'lang' in req: 
            requestJson['lang'] = req['lang']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # classbookid - integer, required (id for classbook article)
    # name - string, optional (name for classbook article)
    # content - string, optional (content for classbook article)
    # ordered - integer, optional (ordered for classbook article)
    # parentid - integer, optional (parentid for classbook article)
    def classbook_update_record(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_update_record')
        if 'classbookid' in req: 
            requestJson['classbookid'] = req['classbookid']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'content' in req: 
            requestJson['content'] = req['content']
        if 'ordered' in req: 
            requestJson['ordered'] = req['ordered']
        if 'parentid' in req: 
            requestJson['parentid'] = req['parentid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # type - enum, required ()
    # message - string, required ()
    def createpublicevent(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('createpublicevent')
        if 'type' in req: 
            requestJson['type'] = req['type']
        if 'message' in req: 
            requestJson['message'] = req['message']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # uuid - uuid, required (Global Identificator of the quest)
    # gameid - integer, required (Which game included this quest)
    # name - string, required (Name of the quest)
    # text - string, required (Description of the quest)
    # score - integer, required (How much append to user score after solve quest by them)
    # author - string, required (Author of the quest)
    # subject - string, required (Subject must be one from types (look types))
    # answer - string, required (Answer for the quest)
    # answer_format - string, required (Answer format for the quest)
    # state - string, required (State of the quest, can be: open, broken, closed)
    # description_state - string, required (You can add some descriptions for quest state)
    def createquest(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('createquest')
        if 'uuid' in req: 
            requestJson['uuid'] = req['uuid']
        if 'gameid' in req: 
            requestJson['gameid'] = req['gameid']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'text' in req: 
            requestJson['text'] = req['text']
        if 'score' in req: 
            requestJson['score'] = req['score']
        if 'author' in req: 
            requestJson['author'] = req['author']
        if 'subject' in req: 
            requestJson['subject'] = req['subject']
        if 'answer' in req: 
            requestJson['answer'] = req['answer']
        if 'answer_format' in req: 
            requestJson['answer_format'] = req['answer_format']
        if 'state' in req: 
            requestJson['state'] = req['state']
        if 'description_state' in req: 
            requestJson['description_state'] = req['description_state']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # hintid - integer, required (hint id)
    def deletehint(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('deletehint')
        if 'hintid' in req: 
            requestJson['hintid'] = req['hintid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # hintid - integer, required (hint id)
    def deletepublicevent(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('deletepublicevent')
        if 'hintid' in req: 
            requestJson['hintid'] = req['hintid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # from - email, required (From user)
    # text - string, required (Text of feedback)
    # type - string, required (Type)
    def feedback_add(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('feedback_add')
        if 'from' in req: 
            requestJson['from'] = req['from']
        if 'text' in req: 
            requestJson['text'] = req['text']
        if 'type' in req: 
            requestJson['type'] = req['type']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # uuid - uuid, required (Global Identificator of the Game)
    # name - string, required (Name of the Game)
    # description - string, required (Description of the Game)
    # state - string, required (State of the game)
    # form - string, required (Form of the game)
    # type - string, required (Type of the game)
    # date_start - string, required (Date start)
    # date_stop - string, required (Date stop)
    # date_restart - string, required (Date restart)
    # organizators - string, required (Organizators)
    def game_create(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('game_create')
        if 'uuid' in req: 
            requestJson['uuid'] = req['uuid']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'description' in req: 
            requestJson['description'] = req['description']
        if 'state' in req: 
            requestJson['state'] = req['state']
        if 'form' in req: 
            requestJson['form'] = req['form']
        if 'type' in req: 
            requestJson['type'] = req['type']
        if 'date_start' in req: 
            requestJson['date_start'] = req['date_start']
        if 'date_stop' in req: 
            requestJson['date_stop'] = req['date_stop']
        if 'date_restart' in req: 
            requestJson['date_restart'] = req['date_restart']
        if 'organizators' in req: 
            requestJson['organizators'] = req['organizators']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # uuid - uuid, required (Global Identificator of the Game)
    # admin_password - string, required (Admin Password)
    def game_delete(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('game_delete')
        if 'uuid' in req: 
            requestJson['uuid'] = req['uuid']
        if 'admin_password' in req: 
            requestJson['admin_password'] = req['admin_password']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # uuid - uuid, required (Global Identificator of the Game)
    def game_export(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('game_export')
        if 'uuid' in req: 
            requestJson['uuid'] = req['uuid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # uuid - uuid, required (Global Identificator of the Game)
    def game_import(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('game_import')
        if 'uuid' in req: 
            requestJson['uuid'] = req['uuid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # uuid - uuid, required (Global Identificator of the Game)
    def game_info(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('game_info')
        if 'uuid' in req: 
            requestJson['uuid'] = req['uuid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # uuid - uuid, required (Global Identificator of the Game)
    # name - string, required (Name of the Game)
    # description - string, required (Description of the Game)
    # state - string, required (State of the game)
    # form - string, required (Form of the game)
    # type - string, required (Type of the game)
    # date_start - string, required (Date start)
    # date_stop - string, required (Date stop)
    # date_restart - string, required (Date restart)
    # organizators - string, required (Organizators)
    def game_update(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('game_update')
        if 'uuid' in req: 
            requestJson['uuid'] = req['uuid']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'description' in req: 
            requestJson['description'] = req['description']
        if 'state' in req: 
            requestJson['state'] = req['state']
        if 'form' in req: 
            requestJson['form'] = req['form']
        if 'type' in req: 
            requestJson['type'] = req['type']
        if 'date_start' in req: 
            requestJson['date_start'] = req['date_start']
        if 'date_stop' in req: 
            requestJson['date_stop'] = req['date_stop']
        if 'date_restart' in req: 
            requestJson['date_restart'] = req['date_restart']
        if 'organizators' in req: 
            requestJson['organizators'] = req['organizators']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # gameid - integer, required (GameID)
    # image_png_base64 - string, required (Image PNG in Base64)
    def game_update_logo(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('game_update_logo')
        if 'gameid' in req: 
            requestJson['gameid'] = req['gameid']
        if 'image_png_base64' in req: 
            requestJson['image_png_base64'] = req['image_png_base64']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    def games(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('games')
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    def getmap(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('getmap')
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # eventid - integer, required (Event id)
    def getpublicevent(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('getpublicevent')
        if 'eventid' in req: 
            requestJson['eventid'] = req['eventid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # questid - integer, required (Quest id)
    def hints(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('hints')
        if 'questid' in req: 
            requestJson['questid'] = req['questid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # gameid - integer, required (Id of the game)
    # name - string, required (Visible part of the content)
    # content - string, required (Content of the leak)
    # score - integer, required (Price of the leak)
    def leaks_add(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('leaks_add')
        if 'gameid' in req: 
            requestJson['gameid'] = req['gameid']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'content' in req: 
            requestJson['content'] = req['content']
        if 'score' in req: 
            requestJson['score'] = req['score']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user yes
    # Access admin no
    # id - integer, required (Leak id)
    def leaks_buy(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('leaks_buy')
        if 'id' in req: 
            requestJson['id'] = req['id']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # id - integer, required (Leak id)
    def leaks_delete(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('leaks_delete')
        if 'id' in req: 
            requestJson['id'] = req['id']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # page - integer, required (Number of page)
    # onpage - integer, required (How much rows in one page)
    def leaks_list(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('leaks_list')
        if 'page' in req: 
            requestJson['page'] = req['page']
        if 'onpage' in req: 
            requestJson['onpage'] = req['onpage']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # id - integer, required (Leak id)
    # name - string, optional (Visible part of the content)
    # content - string, optional (Content of the leak)
    # score - integer, optional (Price of the leak)
    def leaks_update(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('leaks_update')
        if 'id' in req: 
            requestJson['id'] = req['id']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'content' in req: 
            requestJson['content'] = req['content']
        if 'score' in req: 
            requestJson['score'] = req['score']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user no
    # Access admin no
    # email - string, required (E-mail)
    # password - string, required (Password)
    def login(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('login')
        if 'email' in req: 
            requestJson['email'] = req['email']
        if 'password' in req: 
            requestJson['password'] = req['password']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # name - string, required (Container name)
    # action - string, required (Actions: create, start, stop and delete container)
    def lxd_containers(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('lxd_containers')
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'action' in req: 
            requestJson['action'] = req['action']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user no
    # Access admin yes
    # name - string, required (Container name)
    # get - string, optional (Requested information)
    def lxd_info(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('lxd_info')
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'get' in req: 
            requestJson['get'] = req['get']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    def lxd_list(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('lxd_list')
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    def mail_info(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('mail_info')
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # to - email, required (E-mail of the recipient)
    # subject - string, required (Subject of the message)
    # body - string, required (Body of the message)
    def mail_send(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('mail_send')
        if 'to' in req: 
            requestJson['to'] = req['to']
        if 'subject' in req: 
            requestJson['subject'] = req['subject']
        if 'body' in req: 
            requestJson['body'] = req['body']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # filter_email - string, optional (Filter by email)
    # filter_subject - string, optional (Filter by subject)
    # filter_message - string, optional (Filter by message)
    # onpage - integer, optional (On page)
    # page - integer, optional (page)
    def mails_list(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('mails_list')
        if 'filter_email' in req: 
            requestJson['filter_email'] = req['filter_email']
        if 'filter_subject' in req: 
            requestJson['filter_subject'] = req['filter_subject']
        if 'filter_message' in req: 
            requestJson['filter_message'] = req['filter_message']
        if 'onpage' in req: 
            requestJson['onpage'] = req['onpage']
        if 'page' in req: 
            requestJson['page'] = req['page']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    def public_info(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('public_info')
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # page - integer, required (Number of page)
    # onpage - integer, required (How much rows in one page)
    def publiceventslist(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('publiceventslist')
        if 'page' in req: 
            requestJson['page'] = req['page']
        if 'onpage' in req: 
            requestJson['onpage'] = req['onpage']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # questid - integer, required (Quest ID)
    def quest(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('quest')
        if 'questid' in req: 
            requestJson['questid'] = req['questid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # questid - integer, required (Quest ID)
    def quest_delete(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('quest_delete')
        if 'questid' in req: 
            requestJson['questid'] = req['questid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user yes
    # Access admin yes
    # questid - integer, required (Quest ID)
    # answer - string, required (Answer)
    def quest_pass(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('quest_pass')
        if 'questid' in req: 
            requestJson['questid'] = req['questid']
        if 'answer' in req: 
            requestJson['answer'] = req['answer']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user yes
    # Access admin yes
    # gameid - integer, required (Which game included this quest)
    # name - string, required (Name of the quest)
    # text - string, required (Description of the quest)
    # score - integer, required (How much append to user score after solve quest by them)
    # author - string, required (Author of the quest)
    # subject - string, required (Subject must be one from types (look types))
    # answer - string, required (Answer for the quest)
    # answer_format - string, required (Answer format for the quest)
    def quest_proposal(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('quest_proposal')
        if 'gameid' in req: 
            requestJson['gameid'] = req['gameid']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'text' in req: 
            requestJson['text'] = req['text']
        if 'score' in req: 
            requestJson['score'] = req['score']
        if 'author' in req: 
            requestJson['author'] = req['author']
        if 'subject' in req: 
            requestJson['subject'] = req['subject']
        if 'answer' in req: 
            requestJson['answer'] = req['answer']
        if 'answer_format' in req: 
            requestJson['answer_format'] = req['answer_format']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # questid - integer, required (Quest ID)
    def quest_statistics(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('quest_statistics')
        if 'questid' in req: 
            requestJson['questid'] = req['questid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # questid - integer, required (Quest ID)
    # name - string, optional (Name of the quest)
    # gameid - integer, optional (Which game included this quest)
    # text - string, optional (Description of the quest)
    # score - integer, optional (How much append to user score after solve quest by them)
    # subject - string, optional (Subject must be one from types (look types))
    # answer - string, optional (Answer for the quest)
    # answer_format - string, optional (Answer format for the quest)
    # state - string, optional (State of the quest, can be: open, broken, closed)
    # description_state - string, optional (You can add some descriptions for quest state)
    def quest_update(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('quest_update')
        if 'questid' in req: 
            requestJson['questid'] = req['questid']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'gameid' in req: 
            requestJson['gameid'] = req['gameid']
        if 'text' in req: 
            requestJson['text'] = req['text']
        if 'score' in req: 
            requestJson['score'] = req['score']
        if 'subject' in req: 
            requestJson['subject'] = req['subject']
        if 'answer' in req: 
            requestJson['answer'] = req['answer']
        if 'answer_format' in req: 
            requestJson['answer_format'] = req['answer_format']
        if 'state' in req: 
            requestJson['state'] = req['state']
        if 'description_state' in req: 
            requestJson['description_state'] = req['description_state']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # subject - string, optional (Filter by subject)
    def quests(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('quests')
        if 'subject' in req: 
            requestJson['subject'] = req['subject']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # onpage - integer, optional (On page)
    # page - integer, optional (page)
    def quests_proposal_list(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('quests_proposal_list')
        if 'onpage' in req: 
            requestJson['onpage'] = req['onpage']
        if 'page' in req: 
            requestJson['page'] = req['page']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    def quests_subjects(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('quests_subjects')
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user no
    # Access admin no
    # email - email, required (E-mail)
    # university - string, required (University)
    def registration(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('registration')
        if 'email' in req: 
            requestJson['email'] = req['email']
        if 'university' in req: 
            requestJson['university'] = req['university']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # page - integer, required (Number of page)
    # onpage - integer, required (How much rows in one page)
    def scoreboard(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('scoreboard')
        if 'page' in req: 
            requestJson['page'] = req['page']
        if 'onpage' in req: 
            requestJson['onpage'] = req['onpage']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    def sendchatmessage(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('sendchatmessage')
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    def server_api(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('server_api')
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    def server_info(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('server_info')
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    def server_settings(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('server_settings')
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # name - string, required (name of setting)
    # value - any, required (value of setting)
    def server_settings_update(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('server_settings_update')
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'value' in req: 
            requestJson['value'] = req['value']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user no
    # Access admin no
    # token - string, optional (Auth token)
    def token(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('token')
        if 'token' in req: 
            requestJson['token'] = req['token']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # userid - integer, required (User ID)
    def updateuserlocation(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('updateuserlocation')
        if 'userid' in req: 
            requestJson['userid'] = req['userid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # userid - integer, optional (Id of user)
    def user(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('user')
        if 'userid' in req: 
            requestJson['userid'] = req['userid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user yes
    # Access admin yes
    # password_old - string, required (Old password)
    # password_new - string, required (New password)
    def user_change_password(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('user_change_password')
        if 'password_old' in req: 
            requestJson['password_old'] = req['password_old']
        if 'password_new' in req: 
            requestJson['password_new'] = req['password_new']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # email - string, required (User's E-mail)
    # nick - string, required (User's nick)
    # password - string, required (Password)
    # role - string, required (User's role)
    # university - string, optional (University)
    def user_create(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('user_create')
        if 'email' in req: 
            requestJson['email'] = req['email']
        if 'nick' in req: 
            requestJson['nick'] = req['nick']
        if 'password' in req: 
            requestJson['password'] = req['password']
        if 'role' in req: 
            requestJson['role'] = req['role']
        if 'university' in req: 
            requestJson['university'] = req['university']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # userid - integer, required (User's id)
    # password - string, required (Admin's password)
    def user_delete(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('user_delete')
        if 'userid' in req: 
            requestJson['userid'] = req['userid']
        if 'password' in req: 
            requestJson['password'] = req['password']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user no
    # Access admin no
    # email - email, required (E-mail)
    def user_reset_password(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('user_reset_password')
        if 'email' in req: 
            requestJson['email'] = req['email']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # userid - integer, required (Id of user)
    def user_skills(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('user_skills')
        if 'userid' in req: 
            requestJson['userid'] = req['userid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user yes
    # Access admin yes
    # userid - integer, required (Id of user)
    # nick - string, optional (Nick of user)
    # university - string, optional (University of user)
    # about - string, optional (About of user)
    def user_update(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('user_update')
        if 'userid' in req: 
            requestJson['userid'] = req['userid']
        if 'nick' in req: 
            requestJson['nick'] = req['nick']
        if 'university' in req: 
            requestJson['university'] = req['university']
        if 'about' in req: 
            requestJson['about'] = req['about']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # filter_text - string, optional (Filter by user email or nick)
    # filter_role - string, optional (Filter by user role)
    # onpage - integer, optional (On page)
    # page - integer, optional (page)
    def users(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('users')
        if 'filter_text' in req: 
            requestJson['filter_text'] = req['filter_text']
        if 'filter_role' in req: 
            requestJson['filter_role'] = req['filter_role']
        if 'onpage' in req: 
            requestJson['onpage'] = req['onpage']
        if 'page' in req: 
            requestJson['page'] = req['page']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # questid - integer, required (Quest ID)
    def writeups(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('writeups')
        if 'questid' in req: 
            requestJson['questid'] = req['questid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
