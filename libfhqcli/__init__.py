# -*- coding: utf-8 -*-
### This file was automatically generated by fhq-server
### Version: 0.2.15
### Date: some

import json
import functools
import websocket
import time
import Queue
import select
from threading import Thread

class FHQCliRecvThread(Thread):
    __ws = None;
    __sendCommandQueue = Queue.Queue();
    __cmd_results = {};
    do_run = True;
    __connecting = False;
    __url = None;
    __messageId = 0;
    
    def __init__(self, url):
        Thread.__init__(self)
        self.__url = url;
    
    def run(self):
        self.__connecting = True
        print('[FHQCliThread] Connecting to ' + self.__url)
        try:
            self.__ws = websocket.create_connection(self.__url)
        except:
            print('Failed connect to ' + self.__url)
            self.__ws = None
            self.__connecting = False
            return
        # self.__ws.setblocking(0)
        self.__connecting = False
        print('[FHQCliThread] Connected');
        while(self.do_run):
            while not self.__sendCommandQueue.empty():
                requestJson = self.__sendCommandQueue.get();
                requestText = json.dumps(requestJson);
                # print('requestText: ' + requestText);
                self.__ws.send(requestText)
            ready = select.select([self.__ws], [], [], 0.1)
            if ready[0]:
                responseText =  self.__ws.recv()
                responseJson = json.loads(responseText)
                cmd_m = responseJson['m'];
                self.__cmd_results[cmd_m] = json.loads(responseText);
                # print(responseText)
            time.sleep(0.5)
        print('[FHQCliThread] Stopping...');
        self.__ws.close()
        self.__ws = None
        print('[FHQCliThread] Stopped');
    
    def addToSendQueue(self, requestJson):
        self.__sendCommandQueue.put(requestJson);
        return requestJson['m'];
    
    def generateBaseCommand(self, cmd):
        self.__messageId = self.__messageId + 1;
        requestJson = {};
        msgId = 'm' + str(self.__messageId);
        requestJson['m'] = msgId;
        requestJson['cmd'] = cmd;
        return requestJson;
    
    def hasCmdResult(self, cmd_m):
        return cmd_m in self.__cmd_results;
    
    def getCmdResult(self, cmd_m):
        return self.__cmd_results[cmd_m]
    
    def removeCmdResult(self, cmd_m):
        self.__cmd_results.pop(cmd_m, None)
    
    def hasConnection(self):
        return self.__connecting or self.__ws != None

class FHQCli:
    # __ws = None;
    __url = 'ws://localhost:1234/';
    __recvThread = None
    def __init__(self, url):
        self.__url = url
        self.connect();
    
    def __enter__(self):
        return self
    
    def __exit__(self, exc_type, exc_value, traceback):
        self.__recvThread.do_run = False;
    
    def close(self):
        self.__recvThread.do_run = False;
    
    def setUrl(self, url):
        self.__url = url;
    
    def getUrl(self):
        return self.__url;
    
    def connect(self):
        self.__recvThread = FHQCliRecvThread(self.__url)
        self.__recvThread.start()
        # self.__recvThread.join()
        # print('FHQCli: Thread started');
        return True;
    
    def __looper(self, cmd_m):
        max_time = 5*10; # 5 seconds
        counter_time = 0;
        cmd_result = {};
        while True:
            counter_time = counter_time + 1;
            if not self.__recvThread.hasConnection():
                return None
            if self.__recvThread.hasCmdResult(cmd_m):
                cmd_result = self.__recvThread.getCmdResult(cmd_m);
                self.__recvThread.removeCmdResult(cmd_m);
                return cmd_result
            if counter_time > max_time:
                cmd_result = None
                break;
            time.sleep(0.2)
            # print('__looper ....')
        return cmd_result;
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # questid - , required (quest id)
    # hint - , required (hint text)
    def addhint(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('addhint')
        if req['questid'] != None: 
            requestJson['questid'] = req['questid']
        if req['hint'] != None: 
            requestJson['hint'] = req['hint']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # page - , required (Number of page)
    # onpage - , required (How much rows on page)
    # questid - , optional (Filter for questid)
    # userid - , optional (Filter for userid)
    def answerlist(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('answerlist')
        if req['page'] != None: 
            requestJson['page'] = req['page']
        if req['onpage'] != None: 
            requestJson['onpage'] = req['onpage']
        if req['questid'] != None: 
            requestJson['questid'] = req['questid']
        if req['userid'] != None: 
            requestJson['userid'] = req['userid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # parentid - , required (pareintid for classbook article)
    # name - , required (name of article)
    # content - , required (content of article)
    # uuid - , optional (uuid of article)
    # ordered - , optional (order of article)
    def classbook_add_record(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_add_record')
        if req['parentid'] != None: 
            requestJson['parentid'] = req['parentid']
        if req['name'] != None: 
            requestJson['name'] = req['name']
        if req['content'] != None: 
            requestJson['content'] = req['content']
        if req['uuid'] != None: 
            requestJson['uuid'] = req['uuid']
        if req['ordered'] != None: 
            requestJson['ordered'] = req['ordered']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # classbookid - , required (id for classbook article)
    def classbook_delete_record(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_delete_record')
        if req['classbookid'] != None: 
            requestJson['classbookid'] = req['classbookid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user yes
    # Access admin yes
    # output - , required (The output file format)
    # lang - , required (The output file format)
    # zip - , optional (Zipping the output)
    def classbook_export(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_export')
        if req['output'] != None: 
            requestJson['output'] = req['output']
        if req['lang'] != None: 
            requestJson['lang'] = req['lang']
        if req['zip'] != None: 
            requestJson['zip'] = req['zip']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # classbookid - , required (id for the classbook article)
    # lang - , optional (Set lang for the article)
    def classbook_info(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_info')
        if req['classbookid'] != None: 
            requestJson['classbookid'] = req['classbookid']
        if req['lang'] != None: 
            requestJson['lang'] = req['lang']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # parentid - , required (parentid for classbook articles)
    # lang - , optional (lang for classbook articles)
    # search - , optional (Search string for classbook articles)
    def classbook_list(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_list')
        if req['parentid'] != None: 
            requestJson['parentid'] = req['parentid']
        if req['lang'] != None: 
            requestJson['lang'] = req['lang']
        if req['search'] != None: 
            requestJson['search'] = req['search']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # classbookid - , required (Classbookid for article localization)
    # lang - , required (Language)
    # name - , required (Article name)
    # content - , required (The content of the article)
    def classbook_localization_add_record(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_localization_add_record')
        if req['classbookid'] != None: 
            requestJson['classbookid'] = req['classbookid']
        if req['lang'] != None: 
            requestJson['lang'] = req['lang']
        if req['name'] != None: 
            requestJson['name'] = req['name']
        if req['content'] != None: 
            requestJson['content'] = req['content']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # classbook_localizationid - , required (Localization id)
    def classbook_localization_delete_record(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_localization_delete_record')
        if req['classbook_localizationid'] != None: 
            requestJson['classbook_localizationid'] = req['classbook_localizationid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # classbook_localizationid - , required (Localization id)
    def classbook_localization_info(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_localization_info')
        if req['classbook_localizationid'] != None: 
            requestJson['classbook_localizationid'] = req['classbook_localizationid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # classbook_localizationid - , required (Localization id)
    # name - , required (Article name)
    # content - , required (The content of the article)
    def classbook_localization_update_record(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_localization_update_record')
        if req['classbook_localizationid'] != None: 
            requestJson['classbook_localizationid'] = req['classbook_localizationid']
        if req['name'] != None: 
            requestJson['name'] = req['name']
        if req['content'] != None: 
            requestJson['content'] = req['content']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # classbook_proposal_id - , required (Proposal id)
    def classbook_propasal_prepare_merge_record(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_propasal_prepare_merge_record')
        if req['classbook_proposal_id'] != None: 
            requestJson['classbook_proposal_id'] = req['classbook_proposal_id']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user yes
    # Access admin yes
    # classbookid - , required (Classbookid for an article)
    # lang - , required (Language)
    # name - , required (Article name)
    # content - , required (The content of the article)
    def classbook_proposal_add_record(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_proposal_add_record')
        if req['classbookid'] != None: 
            requestJson['classbookid'] = req['classbookid']
        if req['lang'] != None: 
            requestJson['lang'] = req['lang']
        if req['name'] != None: 
            requestJson['name'] = req['name']
        if req['content'] != None: 
            requestJson['content'] = req['content']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user yes
    # Access admin yes
    # classbook_proposal_id - , required (Proposal id)
    def classbook_proposal_delete_record(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_proposal_delete_record')
        if req['classbook_proposal_id'] != None: 
            requestJson['classbook_proposal_id'] = req['classbook_proposal_id']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user yes
    # Access admin yes
    # classbook_proposal_id - , required (Proposal id)
    def classbook_proposal_info(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_proposal_info')
        if req['classbook_proposal_id'] != None: 
            requestJson['classbook_proposal_id'] = req['classbook_proposal_id']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user yes
    # Access admin yes
    # classbookid - , optional (Classbookid for an article)
    # lang - , optional (Language)
    def classbook_proposal_list(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_proposal_list')
        if req['classbookid'] != None: 
            requestJson['classbookid'] = req['classbookid']
        if req['lang'] != None: 
            requestJson['lang'] = req['lang']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # classbookid - , required (id for classbook article)
    # name - , optional (name for classbook article)
    # content - , optional (content for classbook article)
    # ordered - , optional (ordered for classbook article)
    # parentid - , optional (parentid for classbook article)
    def classbook_update_record(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('classbook_update_record')
        if req['classbookid'] != None: 
            requestJson['classbookid'] = req['classbookid']
        if req['name'] != None: 
            requestJson['name'] = req['name']
        if req['content'] != None: 
            requestJson['content'] = req['content']
        if req['ordered'] != None: 
            requestJson['ordered'] = req['ordered']
        if req['parentid'] != None: 
            requestJson['parentid'] = req['parentid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # type - , required ()
    # message - , required ()
    def createpublicevent(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('createpublicevent')
        if req['type'] != None: 
            requestJson['type'] = req['type']
        if req['message'] != None: 
            requestJson['message'] = req['message']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # uuid - , required (Global Identificator of the quest)
    # gameid - , required (Which game included this quest)
    # name - , required (Name of the quest)
    # text - , required (Description of the quest)
    # score - , required (How much append to user score after solve quest by them)
    # author - , required (Author of the quest)
    # subject - , required (Subject must be one from types (look types))
    # answer - , required (Answer for the quest)
    # answer_format - , required (Answer format for the quest)
    # state - , required (State of the quest, can be: open, broken, closed)
    # description_state - , required (You can add some descriptions for quest state)
    def createquest(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('createquest')
        if req['uuid'] != None: 
            requestJson['uuid'] = req['uuid']
        if req['gameid'] != None: 
            requestJson['gameid'] = req['gameid']
        if req['name'] != None: 
            requestJson['name'] = req['name']
        if req['text'] != None: 
            requestJson['text'] = req['text']
        if req['score'] != None: 
            requestJson['score'] = req['score']
        if req['author'] != None: 
            requestJson['author'] = req['author']
        if req['subject'] != None: 
            requestJson['subject'] = req['subject']
        if req['answer'] != None: 
            requestJson['answer'] = req['answer']
        if req['answer_format'] != None: 
            requestJson['answer_format'] = req['answer_format']
        if req['state'] != None: 
            requestJson['state'] = req['state']
        if req['description_state'] != None: 
            requestJson['description_state'] = req['description_state']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # hintid - , required (hint id)
    def deletehint(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('deletehint')
        if req['hintid'] != None: 
            requestJson['hintid'] = req['hintid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # hintid - , required (hint id)
    def deletepublicevent(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('deletepublicevent')
        if req['hintid'] != None: 
            requestJson['hintid'] = req['hintid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # from - , required (From user)
    # text - , required (Text of feedback)
    # type - , required (Type)
    def feedback_add(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('feedback_add')
        if req['from'] != None: 
            requestJson['from'] = req['from']
        if req['text'] != None: 
            requestJson['text'] = req['text']
        if req['type'] != None: 
            requestJson['type'] = req['type']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # uuid - , required (Global Identificator of the Game)
    # name - , required (Name of the Game)
    # description - , required (Description of the Game)
    # state - , required (State of the game)
    # form - , required (Form of the game)
    # type - , required (Type of the game)
    # date_start - , required (Date start)
    # date_stop - , required (Date stop)
    # date_restart - , required (Date restart)
    # organizators - , required (Organizators)
    def game_create(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('game_create')
        if req['uuid'] != None: 
            requestJson['uuid'] = req['uuid']
        if req['name'] != None: 
            requestJson['name'] = req['name']
        if req['description'] != None: 
            requestJson['description'] = req['description']
        if req['state'] != None: 
            requestJson['state'] = req['state']
        if req['form'] != None: 
            requestJson['form'] = req['form']
        if req['type'] != None: 
            requestJson['type'] = req['type']
        if req['date_start'] != None: 
            requestJson['date_start'] = req['date_start']
        if req['date_stop'] != None: 
            requestJson['date_stop'] = req['date_stop']
        if req['date_restart'] != None: 
            requestJson['date_restart'] = req['date_restart']
        if req['organizators'] != None: 
            requestJson['organizators'] = req['organizators']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # uuid - , required (Global Identificator of the Game)
    # admin_password - , required (Admin Password)
    def game_delete(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('game_delete')
        if req['uuid'] != None: 
            requestJson['uuid'] = req['uuid']
        if req['admin_password'] != None: 
            requestJson['admin_password'] = req['admin_password']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # uuid - , required (Global Identificator of the Game)
    def game_export(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('game_export')
        if req['uuid'] != None: 
            requestJson['uuid'] = req['uuid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # uuid - , required (Global Identificator of the Game)
    def game_import(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('game_import')
        if req['uuid'] != None: 
            requestJson['uuid'] = req['uuid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # uuid - , required (Global Identificator of the Game)
    def game_info(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('game_info')
        if req['uuid'] != None: 
            requestJson['uuid'] = req['uuid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # uuid - , required (Global Identificator of the Game)
    # name - , required (Name of the Game)
    # description - , required (Description of the Game)
    # state - , required (State of the game)
    # form - , required (Form of the game)
    # type - , required (Type of the game)
    # date_start - , required (Date start)
    # date_stop - , required (Date stop)
    # date_restart - , required (Date restart)
    # organizators - , required (Organizators)
    def game_update(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('game_update')
        if req['uuid'] != None: 
            requestJson['uuid'] = req['uuid']
        if req['name'] != None: 
            requestJson['name'] = req['name']
        if req['description'] != None: 
            requestJson['description'] = req['description']
        if req['state'] != None: 
            requestJson['state'] = req['state']
        if req['form'] != None: 
            requestJson['form'] = req['form']
        if req['type'] != None: 
            requestJson['type'] = req['type']
        if req['date_start'] != None: 
            requestJson['date_start'] = req['date_start']
        if req['date_stop'] != None: 
            requestJson['date_stop'] = req['date_stop']
        if req['date_restart'] != None: 
            requestJson['date_restart'] = req['date_restart']
        if req['organizators'] != None: 
            requestJson['organizators'] = req['organizators']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # gameid - , required (GameID)
    # image_png_base64 - , required (Image PNG in Base64)
    def game_update_logo(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('game_update_logo')
        if req['gameid'] != None: 
            requestJson['gameid'] = req['gameid']
        if req['image_png_base64'] != None: 
            requestJson['image_png_base64'] = req['image_png_base64']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    def games(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('games')
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    def getmap(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('getmap')
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # eventid - , required (Event id)
    def getpublicevent(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('getpublicevent')
        if req['eventid'] != None: 
            requestJson['eventid'] = req['eventid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # questid - , required (Quest id)
    def hints(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('hints')
        if req['questid'] != None: 
            requestJson['questid'] = req['questid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # gameid - , required (Id of the game)
    # name - , required (Visible part of the content)
    # content - , required (Content of the leak)
    # score - , required (Price of the leak)
    def leaks_add(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('leaks_add')
        if req['gameid'] != None: 
            requestJson['gameid'] = req['gameid']
        if req['name'] != None: 
            requestJson['name'] = req['name']
        if req['content'] != None: 
            requestJson['content'] = req['content']
        if req['score'] != None: 
            requestJson['score'] = req['score']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user yes
    # Access admin no
    # id - , required (Leak id)
    def leaks_buy(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('leaks_buy')
        if req['id'] != None: 
            requestJson['id'] = req['id']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # id - , required (Leak id)
    def leaks_delete(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('leaks_delete')
        if req['id'] != None: 
            requestJson['id'] = req['id']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # page - , required (Number of page)
    # onpage - , required (How much rows in one page)
    def leaks_list(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('leaks_list')
        if req['page'] != None: 
            requestJson['page'] = req['page']
        if req['onpage'] != None: 
            requestJson['onpage'] = req['onpage']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # id - , required (Leak id)
    # name - , optional (Visible part of the content)
    # content - , optional (Content of the leak)
    # score - , optional (Price of the leak)
    def leaks_update(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('leaks_update')
        if req['id'] != None: 
            requestJson['id'] = req['id']
        if req['name'] != None: 
            requestJson['name'] = req['name']
        if req['content'] != None: 
            requestJson['content'] = req['content']
        if req['score'] != None: 
            requestJson['score'] = req['score']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user no
    # Access admin no
    # email - , required (E-mail)
    # password - , required (Password)
    def login(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('login')
        if req['email'] != None: 
            requestJson['email'] = req['email']
        if req['password'] != None: 
            requestJson['password'] = req['password']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # name - , required (Container name)
    # action - , required (Actions: create, start, stop and delete container)
    def lxd_containers(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('lxd_containers')
        if req['name'] != None: 
            requestJson['name'] = req['name']
        if req['action'] != None: 
            requestJson['action'] = req['action']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user no
    # Access admin yes
    # name - , required (Container name)
    # get - , optional (Requested information)
    def lxd_info(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('lxd_info')
        if req['name'] != None: 
            requestJson['name'] = req['name']
        if req['get'] != None: 
            requestJson['get'] = req['get']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    def lxd_list(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('lxd_list')
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    def mail_info(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('mail_info')
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # to - , required (E-mail of the recipient)
    # subject - , required (Subject of the message)
    # body - , required (Body of the message)
    def mail_send(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('mail_send')
        if req['to'] != None: 
            requestJson['to'] = req['to']
        if req['subject'] != None: 
            requestJson['subject'] = req['subject']
        if req['body'] != None: 
            requestJson['body'] = req['body']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # filter_email - , optional (Filter by email)
    # filter_subject - , optional (Filter by subject)
    # filter_message - , optional (Filter by message)
    # onpage - , optional (On page)
    # page - , optional (page)
    def mails_list(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('mails_list')
        if req['filter_email'] != None: 
            requestJson['filter_email'] = req['filter_email']
        if req['filter_subject'] != None: 
            requestJson['filter_subject'] = req['filter_subject']
        if req['filter_message'] != None: 
            requestJson['filter_message'] = req['filter_message']
        if req['onpage'] != None: 
            requestJson['onpage'] = req['onpage']
        if req['page'] != None: 
            requestJson['page'] = req['page']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    def public_info(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('public_info')
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # page - , required (Number of page)
    # onpage - , required (How much rows in one page)
    def publiceventslist(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('publiceventslist')
        if req['page'] != None: 
            requestJson['page'] = req['page']
        if req['onpage'] != None: 
            requestJson['onpage'] = req['onpage']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # questid - , required (Quest ID)
    def quest(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('quest')
        if req['questid'] != None: 
            requestJson['questid'] = req['questid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # questid - , required (Quest ID)
    def quest_delete(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('quest_delete')
        if req['questid'] != None: 
            requestJson['questid'] = req['questid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user yes
    # Access admin yes
    # questid - , required (Quest ID)
    # answer - , required (Answer)
    def quest_pass(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('quest_pass')
        if req['questid'] != None: 
            requestJson['questid'] = req['questid']
        if req['answer'] != None: 
            requestJson['answer'] = req['answer']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user yes
    # Access admin yes
    # gameid - , required (Which game included this quest)
    # name - , required (Name of the quest)
    # text - , required (Description of the quest)
    # score - , required (How much append to user score after solve quest by them)
    # author - , required (Author of the quest)
    # subject - , required (Subject must be one from types (look types))
    # answer - , required (Answer for the quest)
    # answer_format - , required (Answer format for the quest)
    def quest_proposal(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('quest_proposal')
        if req['gameid'] != None: 
            requestJson['gameid'] = req['gameid']
        if req['name'] != None: 
            requestJson['name'] = req['name']
        if req['text'] != None: 
            requestJson['text'] = req['text']
        if req['score'] != None: 
            requestJson['score'] = req['score']
        if req['author'] != None: 
            requestJson['author'] = req['author']
        if req['subject'] != None: 
            requestJson['subject'] = req['subject']
        if req['answer'] != None: 
            requestJson['answer'] = req['answer']
        if req['answer_format'] != None: 
            requestJson['answer_format'] = req['answer_format']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # questid - , required (Quest ID)
    def quest_statistics(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('quest_statistics')
        if req['questid'] != None: 
            requestJson['questid'] = req['questid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # questid - , required (Quest ID)
    # name - , optional (Name of the quest)
    # gameid - , optional (Which game included this quest)
    # text - , optional (Description of the quest)
    # score - , optional (How much append to user score after solve quest by them)
    # subject - , optional (Subject must be one from types (look types))
    # answer - , optional (Answer for the quest)
    # answer_format - , optional (Answer format for the quest)
    # state - , optional (State of the quest, can be: open, broken, closed)
    # description_state - , optional (You can add some descriptions for quest state)
    def quest_update(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('quest_update')
        if req['questid'] != None: 
            requestJson['questid'] = req['questid']
        if req['name'] != None: 
            requestJson['name'] = req['name']
        if req['gameid'] != None: 
            requestJson['gameid'] = req['gameid']
        if req['text'] != None: 
            requestJson['text'] = req['text']
        if req['score'] != None: 
            requestJson['score'] = req['score']
        if req['subject'] != None: 
            requestJson['subject'] = req['subject']
        if req['answer'] != None: 
            requestJson['answer'] = req['answer']
        if req['answer_format'] != None: 
            requestJson['answer_format'] = req['answer_format']
        if req['state'] != None: 
            requestJson['state'] = req['state']
        if req['description_state'] != None: 
            requestJson['description_state'] = req['description_state']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # subject - , optional (Filter by subject)
    def quests(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('quests')
        if req['subject'] != None: 
            requestJson['subject'] = req['subject']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # onpage - , optional (On page)
    # page - , optional (page)
    def quests_proposal_list(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('quests_proposal_list')
        if req['onpage'] != None: 
            requestJson['onpage'] = req['onpage']
        if req['page'] != None: 
            requestJson['page'] = req['page']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    def quests_subjects(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('quests_subjects')
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user no
    # Access admin no
    # email - , required (E-mail)
    # university - , required (University)
    def registration(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('registration')
        if req['email'] != None: 
            requestJson['email'] = req['email']
        if req['university'] != None: 
            requestJson['university'] = req['university']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # page - , required (Number of page)
    # onpage - , required (How much rows in one page)
    def scoreboard(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('scoreboard')
        if req['page'] != None: 
            requestJson['page'] = req['page']
        if req['onpage'] != None: 
            requestJson['onpage'] = req['onpage']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    def sendchatmessage(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('sendchatmessage')
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    def server_api(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('server_api')
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    def server_info(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('server_info')
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    def server_settings(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('server_settings')
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # name - , required (name of setting)
    # value - , required (value of setting)
    def server_settings_update(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('server_settings_update')
        if req['name'] != None: 
            requestJson['name'] = req['name']
        if req['value'] != None: 
            requestJson['value'] = req['value']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user no
    # Access admin no
    # token - , optional (Auth token)
    def token(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('token')
        if req['token'] != None: 
            requestJson['token'] = req['token']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # userid - , required (User ID)
    def updateuserlocation(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('updateuserlocation')
        if req['userid'] != None: 
            requestJson['userid'] = req['userid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # userid - , optional (Id of user)
    def user(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('user')
        if req['userid'] != None: 
            requestJson['userid'] = req['userid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user yes
    # Access admin yes
    # password_old - , required (Old password)
    # password_new - , required (New password)
    def user_change_password(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('user_change_password')
        if req['password_old'] != None: 
            requestJson['password_old'] = req['password_old']
        if req['password_new'] != None: 
            requestJson['password_new'] = req['password_new']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # email - , required (User's E-mail)
    # nick - , required (User's nick)
    # password - , required (Password)
    # role - , required (User's role)
    # university - , optional (University)
    def user_create(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('user_create')
        if req['email'] != None: 
            requestJson['email'] = req['email']
        if req['nick'] != None: 
            requestJson['nick'] = req['nick']
        if req['password'] != None: 
            requestJson['password'] = req['password']
        if req['role'] != None: 
            requestJson['role'] = req['role']
        if req['university'] != None: 
            requestJson['university'] = req['university']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # userid - , required (User's id)
    # password - , required (Admin's password)
    def user_delete(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('user_delete')
        if req['userid'] != None: 
            requestJson['userid'] = req['userid']
        if req['password'] != None: 
            requestJson['password'] = req['password']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user no
    # Access admin no
    # email - , required (E-mail)
    def user_reset_password(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('user_reset_password')
        if req['email'] != None: 
            requestJson['email'] = req['email']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # userid - , required (Id of user)
    def user_skills(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('user_skills')
        if req['userid'] != None: 
            requestJson['userid'] = req['userid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user yes
    # Access admin yes
    # userid - , required (Id of user)
    # nick - , optional (Nick of user)
    # university - , optional (University of user)
    # about - , optional (About of user)
    def user_update(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('user_update')
        if req['userid'] != None: 
            requestJson['userid'] = req['userid']
        if req['nick'] != None: 
            requestJson['nick'] = req['nick']
        if req['university'] != None: 
            requestJson['university'] = req['university']
        if req['about'] != None: 
            requestJson['about'] = req['about']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized no
    # Acess user no
    # Access admin yes
    # filter_text - , optional (Filter by user email or nick)
    # filter_role - , optional (Filter by user role)
    # onpage - , optional (On page)
    # page - , optional (page)
    def users(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('users')
        if req['filter_text'] != None: 
            requestJson['filter_text'] = req['filter_text']
        if req['filter_role'] != None: 
            requestJson['filter_role'] = req['filter_role']
        if req['onpage'] != None: 
            requestJson['onpage'] = req['onpage']
        if req['page'] != None: 
            requestJson['page'] = req['page']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
    # Access unauthorized yes
    # Acess user yes
    # Access admin yes
    # questid - , required (Quest ID)
    def writeups(self, req):
        if not self.__recvThread.hasConnection(): return None
        requestJson = self.__recvThread.generateBaseCommand('writeups')
        if req['questid'] != None: 
            requestJson['questid'] = req['questid']
        cmd_m = self.__recvThread.addToSendQueue(requestJson);
        return self.__looper(cmd_m);
    
