#!/usr/bin/env python3
# -*- coding: utf-8 -*-
### This file was automatically generated by fhq-server
### Version: 0.2.24
### Date: 04 Dec 2019

import asyncio
import websocket
import json
import select
import time

class FreeHackQuestClient:
    __ws = None
    __url = None
    __cli_version = '0.2.24'
    __loop = None
    __connecting = False
    __messageIdCounter = 0
    __incomingMesssages = []
    
    def __init__(self, url):
        self.__url = url
        self.__loop = asyncio.get_event_loop()
        try:
            self.__ws = websocket.create_connection(self.__url)
            self.__connecting = True
        except Exception as e:
            print('Failed connect to ' + self.__url)
            print('Exception: ' + str(e))
            self.__ws = None
            self.__connecting = False
            return
    
    def __enter__(self):
        return self
    
    def __exit__(self, exc_type, exc_value, traceback):
        self.close()
    
    def hasConnection(self):
        return self.__ws != None
    
    def close(self):
        if self.__ws != None:
            self.__ws.close()
            self.__ws = None
    
    def receiveIncomingMesssages(self):
        if self.__ws == None:
            return None # TODO has not connection
        while True:
            if self.__ws == None:
                return None # TODO has not connection
            ready = select.select([self.__ws], [], [], 1)
            if ready[0]:
                responseText =  self.__ws.recv()
                responseJson = json.loads(responseText)
                # print('responseText: ' + responseText)
                # incomeMessageId = responseJson['m']
                self.__incomingMesssages.append(responseJson)
            else:
                return
            time.sleep(0.2)
    
    def getIncomingMesssages(self):
        return self.__incomingMesssages
    
    def cleanIncomingMesssages(self):
        self.__incomingMesssages = []
    
    @asyncio.coroutine
    async def __looper(self, messageId):
        max_time = 5*10 # 5 seconds
        counter_time = 0
        while True:
            if self.__ws == None:
                return None # TODO has not connection
            for inmsg in self.__incomingMesssages:
                if inmsg['m'] == messageId:
                    responseJson = inmsg
                    self.__incomingMesssages.remove(responseJson)
                    return responseJson
            counter_time = counter_time + 1
            ready = select.select([self.__ws], [], [], 0.1)
            if ready[0]:
                responseText =  self.__ws.recv()
                responseJson = json.loads(responseText)
                # print('responseText: ' + responseText)
                if 'm' in responseJson:
                    incomeMessageId = responseJson['m']
                    if incomeMessageId == messageId:
                        return responseJson
                    else:
                        self.__incomingMesssages.append(responseJson)
                else:
                    print('What is it? ' + responseText)
            else:
                print('wait...')
            if counter_time > max_time:
                return None
            await asyncio.sleep(0.2)
    
    def generateBaseCommand(self, method):
        requestJson = {}
        self.__messageIdCounter = self.__messageIdCounter + 1
        msgId = 'm' + str(self.__messageIdCounter)
        requestJson['m'] = msgId
        requestJson['cmd'] = method
        requestJson['jsonrpc'] = '2.0'
        requestJson['method'] = method
        return requestJson
    
    def __sendCommand(self, req):
        requestText = json.dumps(req)
        messageId = req['m']
        # print('requestText: ' + requestText)
        self.__ws.send(requestText) 
        result = self.__loop.run_until_complete(asyncio.gather(self.__looper(messageId)))
        return result[0]
    
    def addhint(self, req):
        """Methid add hint to quest
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                questid (integer): required, quest id
                hint (string): required, hint text
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('addhint')
        if 'questid' not in req: 
            raise Exception('Parameter "questid" expected (lib)')
        if 'hint' not in req: 
            raise Exception('Parameter "hint" expected (lib)')
        if 'questid' in req: 
            requestJson['questid'] = req['questid']
        if 'hint' in req: 
            requestJson['hint'] = req['hint']
        return self.__sendCommand(requestJson)
    
    def answerlist(self, req):
        """Return user answers list
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                page (integer): required, Number of page
                onpage (integer): required, How much rows on page
                questid (integer): optional, Filter for questid
                userid (integer): optional, Filter for userid
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('answerlist')
        if 'page' not in req: 
            raise Exception('Parameter "page" expected (lib)')
        if 'onpage' not in req: 
            raise Exception('Parameter "onpage" expected (lib)')
        if 'page' in req: 
            requestJson['page'] = req['page']
        if 'onpage' in req: 
            requestJson['onpage'] = req['onpage']
        if 'questid' in req: 
            requestJson['questid'] = req['questid']
        if 'userid' in req: 
            requestJson['userid'] = req['userid']
        return self.__sendCommand(requestJson)
    
    def chat_latest_messages(self, req):
        """Method will be send chat message and it sent to another users
            
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('chat_latest_messages')
        return self.__sendCommand(requestJson)
    
    def chat_send_message(self, req):
        """Method will be send chat message and it sent to another users
            
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                type (string): required, Type
                message (string): required, Message
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('chat_send_message')
        if 'type' not in req: 
            raise Exception('Parameter "type" expected (lib)')
        if 'message' not in req: 
            raise Exception('Parameter "message" expected (lib)')
        if 'type' in req: 
            requestJson['type'] = req['type']
        if 'message' in req: 
            requestJson['message'] = req['message']
        return self.__sendCommand(requestJson)
    
    def chats_add_to_black_list(self, req):
        """Add user to black list
            
            Activated From Version: 0.2.24
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('chats_add_to_black_list')
        return self.__sendCommand(requestJson)
    
    def chats_add_to_chat(self, req):
        """Add user to some chat
            
            Activated From Version: 0.2.24
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('chats_add_to_chat')
        return self.__sendCommand(requestJson)
    
    def chats_change_owner(self, req):
        """Change owner of the chat
            
            Activated From Version: 0.2.24
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('chats_change_owner')
        return self.__sendCommand(requestJson)
    
    def chats_create_group_chat(self, req):
        """Create group chat
            
            Activated From Version: 0.2.24
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('chats_create_group_chat')
        return self.__sendCommand(requestJson)
    
    def chats_delete_from_black_list(self, req):
        """Delete user from black list
            
            Activated From Version: 0.2.24
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('chats_delete_from_black_list')
        return self.__sendCommand(requestJson)
    
    def chats_delete_from_chat(self, req):
        """Delete user from chat
            
            Activated From Version: 0.2.24
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('chats_delete_from_chat')
        return self.__sendCommand(requestJson)
    
    def chats_dialogs_list(self, req):
        """Show list of dialogs
            
            Activated From Version: 0.2.24
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('chats_dialogs_list')
        return self.__sendCommand(requestJson)
    
    def chats_message_delete(self, req):
        """Delete message from chat
            
            Activated From Version: 0.2.24
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('chats_message_delete')
        return self.__sendCommand(requestJson)
    
    def chats_message_edit(self, req):
        """Edit message
            
            Activated From Version: 0.2.24
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('chats_message_edit')
        return self.__sendCommand(requestJson)
    
    def chats_message_read(self, req):
        """Change chat message status from "unread" to "read"
            
            Activated From Version: 0.2.24
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('chats_message_read')
        return self.__sendCommand(requestJson)
    
    def classbook_add_record(self, req):
        """Adds a new article with the specified name, content, and id.
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                parentid (integer): required, pareintid for classbook article
                name (string): required, name of article
                content (string): required, content of article
                uuid (string): optional, uuid of article
                ordered (integer): optional, order of article
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('classbook_add_record')
        if 'parentid' not in req: 
            raise Exception('Parameter "parentid" expected (lib)')
        if 'name' not in req: 
            raise Exception('Parameter "name" expected (lib)')
        if 'content' not in req: 
            raise Exception('Parameter "content" expected (lib)')
        if 'parentid' in req: 
            requestJson['parentid'] = req['parentid']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'content' in req: 
            requestJson['content'] = req['content']
        if 'uuid' in req: 
            requestJson['uuid'] = req['uuid']
        if 'ordered' in req: 
            requestJson['ordered'] = req['ordered']
        return self.__sendCommand(requestJson)
    
    def classbook_delete_record(self, req):
        """Delete a article with a given classbookid
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                classbookid (integer): required, id for classbook article
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('classbook_delete_record')
        if 'classbookid' not in req: 
            raise Exception('Parameter "classbookid" expected (lib)')
        if 'classbookid' in req: 
            requestJson['classbookid'] = req['classbookid']
        return self.__sendCommand(requestJson)
    
    def classbook_export(self, req):
        """Export classbook's articles to html or markdown, optionally in zip archive.
            
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                output (string): required, The output file format
                lang (string): required, The output file format
                zip (boolean): optional, Zipping the output
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('classbook_export')
        if 'output' not in req: 
            raise Exception('Parameter "output" expected (lib)')
        if 'lang' not in req: 
            raise Exception('Parameter "lang" expected (lib)')
        if 'output' in req: 
            requestJson['output'] = req['output']
        if 'lang' in req: 
            requestJson['lang'] = req['lang']
        if 'zip' in req: 
            requestJson['zip'] = req['zip']
        return self.__sendCommand(requestJson)
    
    def classbook_info(self, req):
        """Return name and content, langs, path classbook article with a given id
            
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                classbookid (integer): required, id for the classbook article
                lang (string): optional, Set lang for the article
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('classbook_info')
        if 'classbookid' not in req: 
            raise Exception('Parameter "classbookid" expected (lib)')
        if 'classbookid' in req: 
            requestJson['classbookid'] = req['classbookid']
        if 'lang' in req: 
            requestJson['lang'] = req['lang']
        return self.__sendCommand(requestJson)
    
    def classbook_list(self, req):
        """Return list of classbook articles
            
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                parentid (integer): required, parentid for classbook articles
                lang (string): optional, lang for classbook articles
                search (string): optional, Search string for classbook articles
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('classbook_list')
        if 'parentid' not in req: 
            raise Exception('Parameter "parentid" expected (lib)')
        if 'parentid' in req: 
            requestJson['parentid'] = req['parentid']
        if 'lang' in req: 
            requestJson['lang'] = req['lang']
        if 'search' in req: 
            requestJson['search'] = req['search']
        return self.__sendCommand(requestJson)
    
    def classbook_localization_add_record(self, req):
        """Add a new article localization for the English version
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                classbookid (integer): required, Classbookid for article localization
                lang (string): required, Language
                name (string): required, Article name
                content (string): required, The content of the article
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('classbook_localization_add_record')
        if 'classbookid' not in req: 
            raise Exception('Parameter "classbookid" expected (lib)')
        if 'lang' not in req: 
            raise Exception('Parameter "lang" expected (lib)')
        if 'name' not in req: 
            raise Exception('Parameter "name" expected (lib)')
        if 'content' not in req: 
            raise Exception('Parameter "content" expected (lib)')
        if 'classbookid' in req: 
            requestJson['classbookid'] = req['classbookid']
        if 'lang' in req: 
            requestJson['lang'] = req['lang']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'content' in req: 
            requestJson['content'] = req['content']
        return self.__sendCommand(requestJson)
    
    def classbook_localization_delete_record(self, req):
        """Delete an article localization
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                classbook_localizationid (integer): required, Localization id
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('classbook_localization_delete_record')
        if 'classbook_localizationid' not in req: 
            raise Exception('Parameter "classbook_localizationid" expected (lib)')
        if 'classbook_localizationid' in req: 
            requestJson['classbook_localizationid'] = req['classbook_localizationid']
        return self.__sendCommand(requestJson)
    
    def classbook_localization_info(self, req):
        """Find and display localization for an article by classbookid
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                classbook_localizationid (integer): required, Localization id
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('classbook_localization_info')
        if 'classbook_localizationid' not in req: 
            raise Exception('Parameter "classbook_localizationid" expected (lib)')
        if 'classbook_localizationid' in req: 
            requestJson['classbook_localizationid'] = req['classbook_localizationid']
        return self.__sendCommand(requestJson)
    
    def classbook_localization_update_record(self, req):
        """Update table with localization by classbookid
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                classbook_localizationid (integer): required, Localization id
                name (string): required, Article name
                content (string): required, The content of the article
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('classbook_localization_update_record')
        if 'classbook_localizationid' not in req: 
            raise Exception('Parameter "classbook_localizationid" expected (lib)')
        if 'name' not in req: 
            raise Exception('Parameter "name" expected (lib)')
        if 'content' not in req: 
            raise Exception('Parameter "content" expected (lib)')
        if 'classbook_localizationid' in req: 
            requestJson['classbook_localizationid'] = req['classbook_localizationid']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'content' in req: 
            requestJson['content'] = req['content']
        return self.__sendCommand(requestJson)
    
    def classbook_propasal_prepare_merge_record(self, req):
        """Prepare to merge updating requests
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                classbook_proposal_id (integer): required, Proposal id
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('classbook_propasal_prepare_merge_record')
        if 'classbook_proposal_id' not in req: 
            raise Exception('Parameter "classbook_proposal_id" expected (lib)')
        if 'classbook_proposal_id' in req: 
            requestJson['classbook_proposal_id'] = req['classbook_proposal_id']
        return self.__sendCommand(requestJson)
    
    def classbook_proposal_add_record(self, req):
        """Propose an update of article
            
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                classbookid (integer): required, Classbookid for an article
                lang (string): required, Language
                name (string): required, Article name
                content (string): required, The content of the article
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('classbook_proposal_add_record')
        if 'classbookid' not in req: 
            raise Exception('Parameter "classbookid" expected (lib)')
        if 'lang' not in req: 
            raise Exception('Parameter "lang" expected (lib)')
        if 'name' not in req: 
            raise Exception('Parameter "name" expected (lib)')
        if 'content' not in req: 
            raise Exception('Parameter "content" expected (lib)')
        if 'classbookid' in req: 
            requestJson['classbookid'] = req['classbookid']
        if 'lang' in req: 
            requestJson['lang'] = req['lang']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'content' in req: 
            requestJson['content'] = req['content']
        return self.__sendCommand(requestJson)
    
    def classbook_proposal_delete_record(self, req):
        """Delete a proposal of updating an article
            
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                classbook_proposal_id (integer): required, Proposal id
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('classbook_proposal_delete_record')
        if 'classbook_proposal_id' not in req: 
            raise Exception('Parameter "classbook_proposal_id" expected (lib)')
        if 'classbook_proposal_id' in req: 
            requestJson['classbook_proposal_id'] = req['classbook_proposal_id']
        return self.__sendCommand(requestJson)
    
    def classbook_proposal_info(self, req):
        """Find and display all proposal data by id
            
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                classbook_proposal_id (integer): required, Proposal id
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('classbook_proposal_info')
        if 'classbook_proposal_id' not in req: 
            raise Exception('Parameter "classbook_proposal_id" expected (lib)')
        if 'classbook_proposal_id' in req: 
            requestJson['classbook_proposal_id'] = req['classbook_proposal_id']
        return self.__sendCommand(requestJson)
    
    def classbook_proposal_list(self, req):
        """Display list of proposals by classbookid
            
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                classbookid (integer): required, Classbookid for an article
                lang (string): optional, Language
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('classbook_proposal_list')
        if 'classbookid' not in req: 
            raise Exception('Parameter "classbookid" expected (lib)')
        if 'classbookid' in req: 
            requestJson['classbookid'] = req['classbookid']
        if 'lang' in req: 
            requestJson['lang'] = req['lang']
        return self.__sendCommand(requestJson)
    
    def classbook_update_record(self, req):
        """Update a article with a given classbookid
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                classbookid (integer): required, id for classbook article
                name (string): optional, name for classbook article
                content (string): optional, content for classbook article
                ordered (integer): optional, ordered for classbook article
                parentid (integer): optional, parentid for classbook article
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('classbook_update_record')
        if 'classbookid' not in req: 
            raise Exception('Parameter "classbookid" expected (lib)')
        if 'classbookid' in req: 
            requestJson['classbookid'] = req['classbookid']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'content' in req: 
            requestJson['content'] = req['content']
        if 'ordered' in req: 
            requestJson['ordered'] = req['ordered']
        if 'parentid' in req: 
            requestJson['parentid'] = req['parentid']
        return self.__sendCommand(requestJson)
    
    def createpublicevent(self, req):
        """Create the public event
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                type (string): required, Type of event
                message (string): required, Message
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('createpublicevent')
        if 'type' not in req: 
            raise Exception('Parameter "type" expected (lib)')
        if 'message' not in req: 
            raise Exception('Parameter "message" expected (lib)')
        if 'type' in req: 
            requestJson['type'] = req['type']
        if 'message' in req: 
            requestJson['message'] = req['message']
        return self.__sendCommand(requestJson)
    
    def createquest(self, req):
        """Method will be create new quest
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                uuid (string): required, Global Identificator of the quest
                gameid (integer): required, Which game included this quest
                name (string): required, Name of the quest
                text (string): required, Description of the quest
                score (integer): required, How much append to user score after solve quest by them
                author (string): required, Author of the quest
                subject (string): required, Subject must be one from types
                answer (string): required, Answer for the quest
                answer_format (string): required, Answer format for the quest
                state (string): required, State of the quest
                description_state (string): required, You can add some descriptions for quest state
                copyright (string): optional, You can add some copyright information
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('createquest')
        if 'uuid' not in req: 
            raise Exception('Parameter "uuid" expected (lib)')
        if 'gameid' not in req: 
            raise Exception('Parameter "gameid" expected (lib)')
        if 'name' not in req: 
            raise Exception('Parameter "name" expected (lib)')
        if 'text' not in req: 
            raise Exception('Parameter "text" expected (lib)')
        if 'score' not in req: 
            raise Exception('Parameter "score" expected (lib)')
        if 'author' not in req: 
            raise Exception('Parameter "author" expected (lib)')
        if 'subject' not in req: 
            raise Exception('Parameter "subject" expected (lib)')
        if 'answer' not in req: 
            raise Exception('Parameter "answer" expected (lib)')
        if 'answer_format' not in req: 
            raise Exception('Parameter "answer_format" expected (lib)')
        if 'state' not in req: 
            raise Exception('Parameter "state" expected (lib)')
        if 'description_state' not in req: 
            raise Exception('Parameter "description_state" expected (lib)')
        if 'uuid' in req: 
            requestJson['uuid'] = req['uuid']
        if 'gameid' in req: 
            requestJson['gameid'] = req['gameid']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'text' in req: 
            requestJson['text'] = req['text']
        if 'score' in req: 
            requestJson['score'] = req['score']
        if 'author' in req: 
            requestJson['author'] = req['author']
        if 'subject' in req: 
            requestJson['subject'] = req['subject']
        if 'answer' in req: 
            requestJson['answer'] = req['answer']
        if 'answer_format' in req: 
            requestJson['answer_format'] = req['answer_format']
        if 'state' in req: 
            requestJson['state'] = req['state']
        if 'description_state' in req: 
            requestJson['description_state'] = req['description_state']
        if 'copyright' in req: 
            requestJson['copyright'] = req['copyright']
        return self.__sendCommand(requestJson)
    
    def deletehint(self, req):
        """Method for delete hint from quest
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                hintid (integer): required, hint id
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('deletehint')
        if 'hintid' not in req: 
            raise Exception('Parameter "hintid" expected (lib)')
        if 'hintid' in req: 
            requestJson['hintid'] = req['hintid']
        return self.__sendCommand(requestJson)
    
    def deletepublicevent(self, req):
        """Delete public event
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                eventid (integer): required, Event ID
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('deletepublicevent')
        if 'eventid' not in req: 
            raise Exception('Parameter "eventid" expected (lib)')
        if 'eventid' in req: 
            requestJson['eventid'] = req['eventid']
        return self.__sendCommand(requestJson)
    
    def feedback_add(self, req):
        """Create the feedback
            
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                from (string): required, From user
                text (string): required, Text of feedback
                type (string): required, Type of feedback
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('feedback_add')
        if 'from' not in req: 
            raise Exception('Parameter "from" expected (lib)')
        if 'text' not in req: 
            raise Exception('Parameter "text" expected (lib)')
        if 'type' not in req: 
            raise Exception('Parameter "type" expected (lib)')
        if 'from' in req: 
            requestJson['from'] = req['from']
        if 'text' in req: 
            requestJson['text'] = req['text']
        if 'type' in req: 
            requestJson['type'] = req['type']
        return self.__sendCommand(requestJson)
    
    def game_create(self, req):
        """Create the game
            
            Activated From Version: 0.2.0
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                uuid (string): required, Global Identificator of the Game
                name (string): required, Name of the Game
                description (string): required, Description of the Game
                state (string): required, State of the game
                form (string): required, Form of the game
                type (string): required, Type of the game
                date_start (string): required, Date start
                date_stop (string): required, Date stop
                date_restart (string): required, Date restart
                organizators (string): required, Organizators
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('game_create')
        if 'uuid' not in req: 
            raise Exception('Parameter "uuid" expected (lib)')
        if 'name' not in req: 
            raise Exception('Parameter "name" expected (lib)')
        if 'description' not in req: 
            raise Exception('Parameter "description" expected (lib)')
        if 'state' not in req: 
            raise Exception('Parameter "state" expected (lib)')
        if 'form' not in req: 
            raise Exception('Parameter "form" expected (lib)')
        if 'type' not in req: 
            raise Exception('Parameter "type" expected (lib)')
        if 'date_start' not in req: 
            raise Exception('Parameter "date_start" expected (lib)')
        if 'date_stop' not in req: 
            raise Exception('Parameter "date_stop" expected (lib)')
        if 'date_restart' not in req: 
            raise Exception('Parameter "date_restart" expected (lib)')
        if 'organizators' not in req: 
            raise Exception('Parameter "organizators" expected (lib)')
        if 'uuid' in req: 
            requestJson['uuid'] = req['uuid']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'description' in req: 
            requestJson['description'] = req['description']
        if 'state' in req: 
            requestJson['state'] = req['state']
        if 'form' in req: 
            requestJson['form'] = req['form']
        if 'type' in req: 
            requestJson['type'] = req['type']
        if 'date_start' in req: 
            requestJson['date_start'] = req['date_start']
        if 'date_stop' in req: 
            requestJson['date_stop'] = req['date_stop']
        if 'date_restart' in req: 
            requestJson['date_restart'] = req['date_restart']
        if 'organizators' in req: 
            requestJson['organizators'] = req['organizators']
        return self.__sendCommand(requestJson)
    
    def game_delete(self, req):
        """Remove game and all quests
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                uuid (string): required, Global Identificator of the Game
                admin_password (string): required, Admin Password
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('game_delete')
        if 'uuid' not in req: 
            raise Exception('Parameter "uuid" expected (lib)')
        if 'admin_password' not in req: 
            raise Exception('Parameter "admin_password" expected (lib)')
        if 'uuid' in req: 
            requestJson['uuid'] = req['uuid']
        if 'admin_password' in req: 
            requestJson['admin_password'] = req['admin_password']
        return self.__sendCommand(requestJson)
    
    def game_export(self, req):
        """Export the game
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                uuid (string): required, Global Identificator of the Game
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('game_export')
        if 'uuid' not in req: 
            raise Exception('Parameter "uuid" expected (lib)')
        if 'uuid' in req: 
            requestJson['uuid'] = req['uuid']
        return self.__sendCommand(requestJson)
    
    def game_import(self, req):
        """Import game
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                uuid (string): required, Global Identificator of the Game
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('game_import')
        if 'uuid' not in req: 
            raise Exception('Parameter "uuid" expected (lib)')
        if 'uuid' in req: 
            requestJson['uuid'] = req['uuid']
        return self.__sendCommand(requestJson)
    
    def game_info(self, req):
        """Return game info
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                uuid (string): required, Global Identificator of the Game
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('game_info')
        if 'uuid' not in req: 
            raise Exception('Parameter "uuid" expected (lib)')
        if 'uuid' in req: 
            requestJson['uuid'] = req['uuid']
        return self.__sendCommand(requestJson)
    
    def game_update(self, req):
        """Update game info
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                uuid (string): required, Global Identificator of the Game
                name (string): optional, Name of the Game
                description (string): optional, Description of the Game
                state (string): optional, State of the game
                form (string): optional, Form of the game
                type (string): optional, Type of the game
                date_start (string): optional, Date start
                date_stop (string): optional, Date stop
                date_restart (string): optional, Date restart
                organizators (string): optional, Organizators
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('game_update')
        if 'uuid' not in req: 
            raise Exception('Parameter "uuid" expected (lib)')
        if 'uuid' in req: 
            requestJson['uuid'] = req['uuid']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'description' in req: 
            requestJson['description'] = req['description']
        if 'state' in req: 
            requestJson['state'] = req['state']
        if 'form' in req: 
            requestJson['form'] = req['form']
        if 'type' in req: 
            requestJson['type'] = req['type']
        if 'date_start' in req: 
            requestJson['date_start'] = req['date_start']
        if 'date_stop' in req: 
            requestJson['date_stop'] = req['date_stop']
        if 'date_restart' in req: 
            requestJson['date_restart'] = req['date_restart']
        if 'organizators' in req: 
            requestJson['organizators'] = req['organizators']
        return self.__sendCommand(requestJson)
    
    def game_update_logo(self, req):
        """Update game logo
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                uuid (string): required, Global Identificator of the Game
                image_png_base64 (string): required, Image PNG in Base64
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('game_update_logo')
        if 'uuid' not in req: 
            raise Exception('Parameter "uuid" expected (lib)')
        if 'image_png_base64' not in req: 
            raise Exception('Parameter "image_png_base64" expected (lib)')
        if 'uuid' in req: 
            requestJson['uuid'] = req['uuid']
        if 'image_png_base64' in req: 
            requestJson['image_png_base64'] = req['image_png_base64']
        return self.__sendCommand(requestJson)
    
    def games(self, req):
        """Method returned list of games
            
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('games')
        return self.__sendCommand(requestJson)
    
    def getmap(self, req):
        """Returned coordinate list
            
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('getmap')
        return self.__sendCommand(requestJson)
    
    def getpublicevent(self, req):
        """Return public event info by id
            
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                eventid (integer): required, Event id
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('getpublicevent')
        if 'eventid' not in req: 
            raise Exception('Parameter "eventid" expected (lib)')
        if 'eventid' in req: 
            requestJson['eventid'] = req['eventid']
        return self.__sendCommand(requestJson)
    
    def hints(self, req):
        """Return list of hints
            
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                questid (integer): required, Quest id
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('hints')
        if 'questid' not in req: 
            raise Exception('Parameter "questid" expected (lib)')
        if 'questid' in req: 
            requestJson['questid'] = req['questid']
        return self.__sendCommand(requestJson)
    
    def leaks_add(self, req):
        """Method adds a leak
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                uuid (string): required, UUID of the leak
                game_uuid (string): required, UUID of the game
                name (string): required, Visible part of the content
                content (string): required, Content of the leak
                score (integer): required, Price of the leak
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('leaks_add')
        if 'uuid' not in req: 
            raise Exception('Parameter "uuid" expected (lib)')
        if 'game_uuid' not in req: 
            raise Exception('Parameter "game_uuid" expected (lib)')
        if 'name' not in req: 
            raise Exception('Parameter "name" expected (lib)')
        if 'content' not in req: 
            raise Exception('Parameter "content" expected (lib)')
        if 'score' not in req: 
            raise Exception('Parameter "score" expected (lib)')
        if 'uuid' in req: 
            requestJson['uuid'] = req['uuid']
        if 'game_uuid' in req: 
            requestJson['game_uuid'] = req['game_uuid']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'content' in req: 
            requestJson['content'] = req['content']
        if 'score' in req: 
            requestJson['score'] = req['score']
        return self.__sendCommand(requestJson)
    
    def leaks_buy(self, req):
        """Method buys a leak
            
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                id (integer): required, Leak id
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('leaks_buy')
        if 'id' not in req: 
            raise Exception('Parameter "id" expected (lib)')
        if 'id' in req: 
            requestJson['id'] = req['id']
        return self.__sendCommand(requestJson)
    
    def leaks_delete(self, req):
        """Method deletes a leak
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                id (integer): required, Leak id
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('leaks_delete')
        if 'id' not in req: 
            raise Exception('Parameter "id" expected (lib)')
        if 'id' in req: 
            requestJson['id'] = req['id']
        return self.__sendCommand(requestJson)
    
    def leaks_list(self, req):
        """Method returns list of leaks
            
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                page (integer): required, Number of page
                onpage (integer): required, How much rows in one page
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('leaks_list')
        if 'page' not in req: 
            raise Exception('Parameter "page" expected (lib)')
        if 'onpage' not in req: 
            raise Exception('Parameter "onpage" expected (lib)')
        if 'page' in req: 
            requestJson['page'] = req['page']
        if 'onpage' in req: 
            requestJson['onpage'] = req['onpage']
        return self.__sendCommand(requestJson)
    
    def leaks_update(self, req):
        """Method updates a leak
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                id (integer): required, Leak id
                name (string): optional, Visible part of the content
                content (string): optional, Content of the leak
                score (integer): optional, Price of the leak
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('leaks_update')
        if 'id' not in req: 
            raise Exception('Parameter "id" expected (lib)')
        if 'id' in req: 
            requestJson['id'] = req['id']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'content' in req: 
            requestJson['content'] = req['content']
        if 'score' in req: 
            requestJson['score'] = req['score']
        return self.__sendCommand(requestJson)
    
    def login(self, req):
        """Method for login
            
            Allowed access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                email (string): required, E-mail
                password (string): required, Password
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('login')
        if 'email' not in req: 
            raise Exception('Parameter "email" expected (lib)')
        if 'password' not in req: 
            raise Exception('Parameter "password" expected (lib)')
        if 'email' in req: 
            requestJson['email'] = req['email']
        if 'password' in req: 
            requestJson['password'] = req['password']
        return self.__sendCommand(requestJson)
    
    def lxd_containers(self, req):
        """Any actions with the container. Actions: create, start, stop and delete container
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                name (string): required, Container name
                action (string): required, Actions: create, start, stop and delete container
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('lxd_containers')
        if 'name' not in req: 
            raise Exception('Parameter "name" expected (lib)')
        if 'action' not in req: 
            raise Exception('Parameter "action" expected (lib)')
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'action' in req: 
            requestJson['action'] = req['action']
        return self.__sendCommand(requestJson)
    
    def lxd_exec(self, req):
        """Exec command in the container with name.
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                name (string): required, Container name
                command (string): required, Name of execution command
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('lxd_exec')
        if 'name' not in req: 
            raise Exception('Parameter "name" expected (lib)')
        if 'command' not in req: 
            raise Exception('Parameter "command" expected (lib)')
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'command' in req: 
            requestJson['command'] = req['command']
        return self.__sendCommand(requestJson)
    
    def lxd_file(self, req):
        """Pull, push, delete file inside the container.
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                name (string): required, Container name
                action (string): required, Action with files: pull, push or delete
                path (string): required, Path to file inside the container
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('lxd_file')
        if 'name' not in req: 
            raise Exception('Parameter "name" expected (lib)')
        if 'action' not in req: 
            raise Exception('Parameter "action" expected (lib)')
        if 'path' not in req: 
            raise Exception('Parameter "path" expected (lib)')
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'action' in req: 
            requestJson['action'] = req['action']
        if 'path' in req: 
            requestJson['path'] = req['path']
        return self.__sendCommand(requestJson)
    
    def lxd_import_container(self, req):
        """Import container from json configuration.
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                config (string): required, Container's configuration in json dumped string.
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('lxd_import_container')
        if 'config' not in req: 
            raise Exception('Parameter "config" expected (lib)')
        if 'config' in req: 
            requestJson['config'] = req['config']
        return self.__sendCommand(requestJson)
    
    def lxd_import_service_from_zip(self, req):
        """Import Service from zip.
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                zip_file (string): required, Service's configuration in Base64 zip archive.
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('lxd_import_service_from_zip')
        if 'zip_file' not in req: 
            raise Exception('Parameter "zip_file" expected (lib)')
        if 'zip_file' in req: 
            requestJson['zip_file'] = req['zip_file']
        return self.__sendCommand(requestJson)
    
    def lxd_info(self, req):
        """Get information about the orhestra, containers.
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                name (string): required, Container name
                get (string): optional, Requested information
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('lxd_info')
        if 'name' not in req: 
            raise Exception('Parameter "name" expected (lib)')
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'get' in req: 
            requestJson['get'] = req['get']
        return self.__sendCommand(requestJson)
    
    def lxd_list(self, req):
        """Get information about all containers.
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('lxd_list')
        return self.__sendCommand(requestJson)
    
    def lxd_open_port(self, req):
        """Opens the container port.
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                name (string): required, Container name
                port (integer): required, Number container port
                protocol (string): required, Protocol
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('lxd_open_port')
        if 'name' not in req: 
            raise Exception('Parameter "name" expected (lib)')
        if 'port' not in req: 
            raise Exception('Parameter "port" expected (lib)')
        if 'protocol' not in req: 
            raise Exception('Parameter "protocol" expected (lib)')
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'port' in req: 
            requestJson['port'] = req['port']
        if 'protocol' in req: 
            requestJson['protocol'] = req['protocol']
        return self.__sendCommand(requestJson)
    
    def lxd_start_service(self, req):
        """Start service.
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                name (string): required, Service's name.
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('lxd_start_service')
        if 'name' not in req: 
            raise Exception('Parameter "name" expected (lib)')
        if 'name' in req: 
            requestJson['name'] = req['name']
        return self.__sendCommand(requestJson)
    
    def mail_info(self, req):
        """This method Will be return info of mail
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('mail_info')
        return self.__sendCommand(requestJson)
    
    def mail_send(self, req):
        """Mail Send
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                to (string): required, E-mail of the recipient
                subject (string): required, Subject of the message
                body (string): required, Body of the message
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('mail_send')
        if 'to' not in req: 
            raise Exception('Parameter "to" expected (lib)')
        if 'subject' not in req: 
            raise Exception('Parameter "subject" expected (lib)')
        if 'body' not in req: 
            raise Exception('Parameter "body" expected (lib)')
        if 'to' in req: 
            requestJson['to'] = req['to']
        if 'subject' in req: 
            requestJson['subject'] = req['subject']
        if 'body' in req: 
            requestJson['body'] = req['body']
        return self.__sendCommand(requestJson)
    
    def mails_list(self, req):
        """Mails list
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                filter_email (string): optional, Filter by email
                filter_subject (string): optional, Filter by subject
                filter_message (string): optional, Filter by message
                onpage (integer): optional, On page
                page (integer): optional, page
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('mails_list')
        if 'filter_email' in req: 
            requestJson['filter_email'] = req['filter_email']
        if 'filter_subject' in req: 
            requestJson['filter_subject'] = req['filter_subject']
        if 'filter_message' in req: 
            requestJson['filter_message'] = req['filter_message']
        if 'onpage' in req: 
            requestJson['onpage'] = req['onpage']
        if 'page' in req: 
            requestJson['page'] = req['page']
        return self.__sendCommand(requestJson)
    
    def public_info(self, req):
        """Method return public information about server
            
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('public_info')
        return self.__sendCommand(requestJson)
    
    def publiceventslist(self, req):
        """Return list of public events
            
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                page (integer): required, Number of page
                onpage (integer): required, How much rows in one page
                type (string): optional, Filter by type events
                search (string): optional, Filter by message event
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('publiceventslist')
        if 'page' not in req: 
            raise Exception('Parameter "page" expected (lib)')
        if 'onpage' not in req: 
            raise Exception('Parameter "onpage" expected (lib)')
        if 'page' in req: 
            requestJson['page'] = req['page']
        if 'onpage' in req: 
            requestJson['onpage'] = req['onpage']
        if 'type' in req: 
            requestJson['type'] = req['type']
        if 'search' in req: 
            requestJson['search'] = req['search']
        return self.__sendCommand(requestJson)
    
    def quest(self, req):
        """Update the quest info
            
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                questid (integer): required, Quest ID
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('quest')
        if 'questid' not in req: 
            raise Exception('Parameter "questid" expected (lib)')
        if 'questid' in req: 
            requestJson['questid'] = req['questid']
        return self.__sendCommand(requestJson)
    
    def quest_delete(self, req):
        """Method for delete quest
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                questid (integer): required, Quest ID
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('quest_delete')
        if 'questid' not in req: 
            raise Exception('Parameter "questid" expected (lib)')
        if 'questid' in req: 
            requestJson['questid'] = req['questid']
        return self.__sendCommand(requestJson)
    
    def quest_pass(self, req):
        """Quest pass
            
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                questid (integer): required, Quest ID
                answer (string): required, Answer
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('quest_pass')
        if 'questid' not in req: 
            raise Exception('Parameter "questid" expected (lib)')
        if 'answer' not in req: 
            raise Exception('Parameter "answer" expected (lib)')
        if 'questid' in req: 
            requestJson['questid'] = req['questid']
        if 'answer' in req: 
            requestJson['answer'] = req['answer']
        return self.__sendCommand(requestJson)
    
    def quest_proposal(self, req):
        """Add quest proposal
            
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                gameid (integer): required, Which game included this quest
                name (string): required, Name of the quest
                text (string): required, Description of the quest
                score (integer): required, How much append to user score after solve quest by them
                author (string): required, Author of the quest
                subject (string): required, Subject must be one from types (look types)
                answer (string): required, Answer for the quest
                answer_format (string): required, Answer format for the quest
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('quest_proposal')
        if 'gameid' not in req: 
            raise Exception('Parameter "gameid" expected (lib)')
        if 'name' not in req: 
            raise Exception('Parameter "name" expected (lib)')
        if 'text' not in req: 
            raise Exception('Parameter "text" expected (lib)')
        if 'score' not in req: 
            raise Exception('Parameter "score" expected (lib)')
        if 'author' not in req: 
            raise Exception('Parameter "author" expected (lib)')
        if 'subject' not in req: 
            raise Exception('Parameter "subject" expected (lib)')
        if 'answer' not in req: 
            raise Exception('Parameter "answer" expected (lib)')
        if 'answer_format' not in req: 
            raise Exception('Parameter "answer_format" expected (lib)')
        if 'gameid' in req: 
            requestJson['gameid'] = req['gameid']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'text' in req: 
            requestJson['text'] = req['text']
        if 'score' in req: 
            requestJson['score'] = req['score']
        if 'author' in req: 
            requestJson['author'] = req['author']
        if 'subject' in req: 
            requestJson['subject'] = req['subject']
        if 'answer' in req: 
            requestJson['answer'] = req['answer']
        if 'answer_format' in req: 
            requestJson['answer_format'] = req['answer_format']
        return self.__sendCommand(requestJson)
    
    def quest_statistics(self, req):
        """Mehtod will be return quest public statistics
            
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                questid (integer): required, Quest ID
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('quest_statistics')
        if 'questid' not in req: 
            raise Exception('Parameter "questid" expected (lib)')
        if 'questid' in req: 
            requestJson['questid'] = req['questid']
        return self.__sendCommand(requestJson)
    
    def quest_update(self, req):
        """Update the quest info
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                questid (integer): required, Quest ID
                name (string): optional, Name of the quest
                gameid (integer): optional, Which game included this quest
                text (string): optional, Description of the quest
                score (integer): optional, How much append to user score after solve quest by them
                subject (string): optional, Subject must be one from types
                author (string): optional, Author of the quest
                answer (string): optional, Answer for the quest
                answer_format (string): optional, Answer format for the quest
                state (string): optional, State of the quest
                description_state (string): optional, You can update some descriptions for quest state
                copyright (string): optional, You can update copyright
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('quest_update')
        if 'questid' not in req: 
            raise Exception('Parameter "questid" expected (lib)')
        if 'questid' in req: 
            requestJson['questid'] = req['questid']
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'gameid' in req: 
            requestJson['gameid'] = req['gameid']
        if 'text' in req: 
            requestJson['text'] = req['text']
        if 'score' in req: 
            requestJson['score'] = req['score']
        if 'subject' in req: 
            requestJson['subject'] = req['subject']
        if 'author' in req: 
            requestJson['author'] = req['author']
        if 'answer' in req: 
            requestJson['answer'] = req['answer']
        if 'answer_format' in req: 
            requestJson['answer_format'] = req['answer_format']
        if 'state' in req: 
            requestJson['state'] = req['state']
        if 'description_state' in req: 
            requestJson['description_state'] = req['description_state']
        if 'copyright' in req: 
            requestJson['copyright'] = req['copyright']
        return self.__sendCommand(requestJson)
    
    def quests(self, req):
        """Method will be returned quest list
            
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                subject (string): optional, Filter by subject
                filter (string): optional, Filter by some text
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('quests')
        if 'subject' in req: 
            requestJson['subject'] = req['subject']
        if 'filter' in req: 
            requestJson['filter'] = req['filter']
        return self.__sendCommand(requestJson)
    
    def quests_proposal_list(self, req):
        """Quests proposal list
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                onpage (integer): optional, On page
                page (integer): optional, page
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('quests_proposal_list')
        if 'onpage' in req: 
            requestJson['onpage'] = req['onpage']
        if 'page' in req: 
            requestJson['page'] = req['page']
        return self.__sendCommand(requestJson)
    
    def quests_subjects(self, req):
        """Method returned list of quests by subjects
            
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('quests_subjects')
        return self.__sendCommand(requestJson)
    
    def quests_writeups_delete(self, req):
        """This method will be remove writeup
            
            Activated From Version: 0.2.18
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                writeupid (integer): required, WriteUp ID
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('quests_writeups_delete')
        if 'writeupid' not in req: 
            raise Exception('Parameter "writeupid" expected (lib)')
        if 'writeupid' in req: 
            requestJson['writeupid'] = req['writeupid']
        return self.__sendCommand(requestJson)
    
    def quests_writeups_list(self, req):
        """This method will be returned list of writeups by questid
            
            Activated From Version: 0.2.18
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                questid (integer): required, Quest ID
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('quests_writeups_list')
        if 'questid' not in req: 
            raise Exception('Parameter "questid" expected (lib)')
        if 'questid' in req: 
            requestJson['questid'] = req['questid']
        return self.__sendCommand(requestJson)
    
    def quests_writeups_proposal(self, req):
        """This method will be add writeup from authorized user
            
            Activated From Version: 0.2.18
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                questid (integer): required, Quest ID
                writeup_link (string): required, Link to writeup (Must be start from https://www.youtube.com/watch?v=)
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('quests_writeups_proposal')
        if 'questid' not in req: 
            raise Exception('Parameter "questid" expected (lib)')
        if 'writeup_link' not in req: 
            raise Exception('Parameter "writeup_link" expected (lib)')
        if 'questid' in req: 
            requestJson['questid'] = req['questid']
        if 'writeup_link' in req: 
            requestJson['writeup_link'] = req['writeup_link']
        return self.__sendCommand(requestJson)
    
    def quests_writeups_update(self, req):
        """This method will be update writeup approve now
            
            Activated From Version: 0.2.18
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                writeupid (integer): required, WriteUp ID
                approve (string): required, Approve value 1 or 0
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('quests_writeups_update')
        if 'writeupid' not in req: 
            raise Exception('Parameter "writeupid" expected (lib)')
        if 'approve' not in req: 
            raise Exception('Parameter "approve" expected (lib)')
        if 'writeupid' in req: 
            requestJson['writeupid'] = req['writeupid']
        if 'approve' in req: 
            requestJson['approve'] = req['approve']
        return self.__sendCommand(requestJson)
    
    def registration(self, req):
        """Method for registration
            
            Allowed access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                email (string): required, E-mail
                university (string): required, University
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('registration')
        if 'email' not in req: 
            raise Exception('Parameter "email" expected (lib)')
        if 'university' not in req: 
            raise Exception('Parameter "university" expected (lib)')
        if 'email' in req: 
            requestJson['email'] = req['email']
        if 'university' in req: 
            requestJson['university'] = req['university']
        return self.__sendCommand(requestJson)
    
    def scoreboard(self, req):
        """Method return scoreboard
            
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                page (integer): required, Number of page
                onpage (integer): required, How much rows in one page
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('scoreboard')
        if 'page' not in req: 
            raise Exception('Parameter "page" expected (lib)')
        if 'onpage' not in req: 
            raise Exception('Parameter "onpage" expected (lib)')
        if 'page' in req: 
            requestJson['page'] = req['page']
        if 'onpage' in req: 
            requestJson['onpage'] = req['onpage']
        return self.__sendCommand(requestJson)
    
    def server_api(self, req):
        """This method Will be return list of all handlers
            
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('server_api')
        return self.__sendCommand(requestJson)
    
    def server_info(self, req):
        """Return server private information
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('server_info')
        return self.__sendCommand(requestJson)
    
    def server_settings(self, req):
        """Return server settings
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('server_settings')
        return self.__sendCommand(requestJson)
    
    def server_settings_update(self, req):
        """Update server settings
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                name (string): required, name of setting
                value (string): required, value of setting
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('server_settings_update')
        if 'name' not in req: 
            raise Exception('Parameter "name" expected (lib)')
        if 'value' not in req: 
            raise Exception('Parameter "value" expected (lib)')
        if 'name' in req: 
            requestJson['name'] = req['name']
        if 'value' in req: 
            requestJson['value'] = req['value']
        return self.__sendCommand(requestJson)
    
    def token(self, req):
        """Method for login by token
            
            Allowed access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                token (string): required, Authorization token
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('token')
        if 'token' not in req: 
            raise Exception('Parameter "token" expected (lib)')
        if 'token' in req: 
            requestJson['token'] = req['token']
        return self.__sendCommand(requestJson)
    
    def updateuserlocation(self, req):
        """This method will be try update user location by lastip
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                userid (integer): required, User ID
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('updateuserlocation')
        if 'userid' not in req: 
            raise Exception('Parameter "userid" expected (lib)')
        if 'userid' in req: 
            requestJson['userid'] = req['userid']
        return self.__sendCommand(requestJson)
    
    def useful_links_add(self, req):
        """Method for add new useful link
            
            Activated From Version: 0.2.21
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                url (string): required, URL
                description (string): required, Description
                author (string): required, Author
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('useful_links_add')
        if 'url' not in req: 
            raise Exception('Parameter "url" expected (lib)')
        if 'description' not in req: 
            raise Exception('Parameter "description" expected (lib)')
        if 'author' not in req: 
            raise Exception('Parameter "author" expected (lib)')
        if 'url' in req: 
            requestJson['url'] = req['url']
        if 'description' in req: 
            requestJson['description'] = req['description']
        if 'author' in req: 
            requestJson['author'] = req['author']
        return self.__sendCommand(requestJson)
    
    def useful_links_delete(self, req):
        """Method for delete link by admin
            
            Activated From Version: 0.2.21
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                url (string): required, URL
                description (string): required, Description
                author (string): required, Author
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('useful_links_delete')
        if 'url' not in req: 
            raise Exception('Parameter "url" expected (lib)')
        if 'description' not in req: 
            raise Exception('Parameter "description" expected (lib)')
        if 'author' not in req: 
            raise Exception('Parameter "author" expected (lib)')
        if 'url' in req: 
            requestJson['url'] = req['url']
        if 'description' in req: 
            requestJson['description'] = req['description']
        if 'author' in req: 
            requestJson['author'] = req['author']
        return self.__sendCommand(requestJson)
    
    def useful_links_list(self, req):
        """Method will be return list of useful links
            
            Activated From Version: 0.2.21
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                filter (string): optional, Filter by word
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('useful_links_list')
        if 'filter' in req: 
            requestJson['filter'] = req['filter']
        return self.__sendCommand(requestJson)
    
    def useful_links_star(self, req):
        """Method set star
            
            Activated From Version: 0.2.21
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('useful_links_star')
        return self.__sendCommand(requestJson)
    
    def useful_links_unstar(self, req):
        """Method set unstar
            
            Activated From Version: 0.2.21
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('useful_links_unstar')
        return self.__sendCommand(requestJson)
    
    def useful_links_update(self, req):
        """Method for update useful link
            
            Activated From Version: 0.2.21
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                url (string): required, URL
                description (string): required, Description
                author (string): required, Author
                status (string): required, Status
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('useful_links_update')
        if 'url' not in req: 
            raise Exception('Parameter "url" expected (lib)')
        if 'description' not in req: 
            raise Exception('Parameter "description" expected (lib)')
        if 'author' not in req: 
            raise Exception('Parameter "author" expected (lib)')
        if 'status' not in req: 
            raise Exception('Parameter "status" expected (lib)')
        if 'url' in req: 
            requestJson['url'] = req['url']
        if 'description' in req: 
            requestJson['description'] = req['description']
        if 'author' in req: 
            requestJson['author'] = req['author']
        if 'status' in req: 
            requestJson['status'] = req['status']
        return self.__sendCommand(requestJson)
    
    def user(self, req):
        """Return user info
            
            Deprecated From Version: 0.2.17
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                userid (integer): optional, Id of user
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('user')
        if 'userid' in req: 
            requestJson['userid'] = req['userid']
        return self.__sendCommand(requestJson)
    
    def user_change_password(self, req):
        """This method for change user password
            
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                password_old (string): required, Old password
                password_new (string): required, New password
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('user_change_password')
        if 'password_old' not in req: 
            raise Exception('Parameter "password_old" expected (lib)')
        if 'password_new' not in req: 
            raise Exception('Parameter "password_new" expected (lib)')
        if 'password_old' in req: 
            requestJson['password_old'] = req['password_old']
        if 'password_new' in req: 
            requestJson['password_new'] = req['password_new']
        return self.__sendCommand(requestJson)
    
    def user_delete(self, req):
        """Method for deleting a user
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                userid (integer): required, User's id
                password (string): required, Admin's password
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('user_delete')
        if 'userid' not in req: 
            raise Exception('Parameter "userid" expected (lib)')
        if 'password' not in req: 
            raise Exception('Parameter "password" expected (lib)')
        if 'userid' in req: 
            requestJson['userid'] = req['userid']
        if 'password' in req: 
            requestJson['password'] = req['password']
        return self.__sendCommand(requestJson)
    
    def user_reset_password(self, req):
        """Method for reset password
            
            Allowed access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                email (string): required, E-mail
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('user_reset_password')
        if 'email' not in req: 
            raise Exception('Parameter "email" expected (lib)')
        if 'email' in req: 
            requestJson['email'] = req['email']
        return self.__sendCommand(requestJson)
    
    def user_skills(self, req):
        """Return user skills info
            
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                userid (integer): required, Id of user
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('user_skills')
        if 'userid' not in req: 
            raise Exception('Parameter "userid" expected (lib)')
        if 'userid' in req: 
            requestJson['userid'] = req['userid']
        return self.__sendCommand(requestJson)
    
    def user_update(self, req):
        """Update user info
            
            Denied access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                userid (integer): required, Id of user
                nick (string): optional, Nick of user
                university (string): optional, University of user
                about (string): optional, About of user
                country (string): optional, Country of user
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('user_update')
        if 'userid' not in req: 
            raise Exception('Parameter "userid" expected (lib)')
        if 'userid' in req: 
            requestJson['userid'] = req['userid']
        if 'nick' in req: 
            requestJson['nick'] = req['nick']
        if 'university' in req: 
            requestJson['university'] = req['university']
        if 'about' in req: 
            requestJson['about'] = req['about']
        if 'country' in req: 
            requestJson['country'] = req['country']
        return self.__sendCommand(requestJson)
    
    def users(self, req):
        """Method return list of users
            
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                filter_text (string): optional, Filter by user email or nick
                filter_role (string): optional, Filter by user role
                onpage (integer): optional, On Page
                page (integer): optional, Number of page
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('users')
        if 'filter_text' in req: 
            requestJson['filter_text'] = req['filter_text']
        if 'filter_role' in req: 
            requestJson['filter_role'] = req['filter_role']
        if 'onpage' in req: 
            requestJson['onpage'] = req['onpage']
        if 'page' in req: 
            requestJson['page'] = req['page']
        return self.__sendCommand(requestJson)
    
    def users_add(self, req):
        """Method for add new user
            
            Activated From Version: 0.2.17
            Denied access for unauthorized users
            Denied access for users
            Denied access for admins
            
            Args:
                uuid (string): required, User's Global Unique Identifier
                email (string): required, User's E-mail
                nick (string): required, User's nick
                password (string): required, Password
                role (string): required, User's role
                university (string): optional, University
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('users_add')
        if 'uuid' not in req: 
            raise Exception('Parameter "uuid" expected (lib)')
        if 'email' not in req: 
            raise Exception('Parameter "email" expected (lib)')
        if 'nick' not in req: 
            raise Exception('Parameter "nick" expected (lib)')
        if 'password' not in req: 
            raise Exception('Parameter "password" expected (lib)')
        if 'role' not in req: 
            raise Exception('Parameter "role" expected (lib)')
        if 'uuid' in req: 
            requestJson['uuid'] = req['uuid']
        if 'email' in req: 
            requestJson['email'] = req['email']
        if 'nick' in req: 
            requestJson['nick'] = req['nick']
        if 'password' in req: 
            requestJson['password'] = req['password']
        if 'role' in req: 
            requestJson['role'] = req['role']
        if 'university' in req: 
            requestJson['university'] = req['university']
        return self.__sendCommand(requestJson)
    
    def users_info(self, req):
        """Return user info
            
            Activated From Version: 0.2.17
            Allowed access for unauthorized users
            Allowed access for users
            Allowed access for admins
            
            Args:
                uuid (integer): required, Global unique identify of user
        """
        if not self.hasConnection(): return None
        requestJson = self.generateBaseCommand('users_info')
        if 'uuid' not in req: 
            raise Exception('Parameter "uuid" expected (lib)')
        if 'uuid' in req: 
            requestJson['uuid'] = req['uuid']
        return self.__sendCommand(requestJson)
    
